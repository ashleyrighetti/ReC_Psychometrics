#saveRDS(dfGRMSAAW, "dfGRMSAAW.rds")
#bring back the simulated dat from an .rds file
dfGRMSAAW <- readRDS("dfGRMSAAW.rds")
View(dfGRMSAAW)
View(dfGRMSAAW)
grmsAAWmod1  <- 'GRMSAAW =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9 + AF1 + AF2 + AF3 + AF4 + MI1 + MI2 + MI3 + MI4 + MI5 + AUA1 + AUA2 + AUA3 + AUA4'
grmsAAWmod1
grmsAAW1fit <- lavaan::cfa (grmsAAWmod1, data = dfGRMSAAW)
grmsAAW1fit <- lavaan::cfa (grmsAAWmod1, data = dfGRMSAAW)
lavaan::summary(grmsAAW1fit, fit.measures=TRUE, standardized=TRUE, rsquare = TRUE)
semPlot::semPaths(grmsAAW1fit, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
1 - (1004.136/2114.899)
lavaan::fitted(grmsAAW1fit)
#lavaan::residuals(grmsAAW1fit, type = "raw")
#lavaan::residuals(grmsAAW1fit, type = "standardized")
#will hashtag out for knitted file
lavaan::residuals(grmsAAW1fit, type = "cor")
lavaan::modindices(grmsAAW1fit)
#library(semTable)
v1 <- c(AS1 = "Others expect me to be submissive", AS2 = "Others have been surprised when I disagree with them", AS3 = "Others take my silence as a sign of compliance", AS4 = "Others have been surprised when I do things independent of my family", AS5 = "Others have implied that AAW seem content for being a subordinate", AS6 = "Others treat me as if I will always comply with their requests", AS7 = "Others expect me to sacrifice my own needs to take care of others (e.g., family, partner) ecause I am an AAW", AS8 = "Others have hinted that AAW are not assertive enough to be leaders", AS9 = "Others have hinted that AAW seem to have no desire for leadership", AF1 = "Others express sexual interest in me because of my Asian appearance", AF2 = "Others take sexual interest in AAW to fulfill their fantasy", AF3 = "Others take romantic interest in AAW just because they never had sex with an AAW before", AF4 = "Others have treated me as if I am always open to sexual advances", MI1 = "I see non-Asian women being casted to play female Asian characters", MI2 = "I rarely see AAW playing the lead role in the media", MI3 = "I rarely see AAW in the media", MI4 = "I see AAW playing the same type of characters (e.g., Kung Fu woman, sidekick, mistress, tiger mom) in the media", MI5 = "I see AAW charaters being portrayed as emotionally distanct (e.g., cold-hearted, lack of empathy) in the media", AUA1 = "Others have talked about AAW as if they all have the same facial features (e.g., eye shape, skin tone)", AUA2 = "Others have suggested that all AAW look alike", AUA3 = "Others have talked about AAW as if they all have the same body type (e.g., petite, tiny, small-chested", AUA4 = "Others have pointed out physical traits in AAW that do not look 'Asian'")
grmsAAW1table <- semTable::semTable(grmsAAW1fit, columns = c("eststars", "se", "p"), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv",  print.results = TRUE)
grmsAAW1stdzd <- update (grmsAAW1fit, std.lv = TRUE, std.ov = TRUE, meanstructure = TRUE)
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv",  print.results = TRUE)
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
#print.results = TRUE #Can add to see in the script
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
#print.results = TRUE #Can add to see in the script
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
#print.results = TRUE #Can add to see in the script
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
#print.results = TRUE #Can add to see in the script
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv")
#print.results = TRUE #Can add to see in the script
grmsAAW4mod  <- 'AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4'
grmsAAW4mod
grmsAAW4fit <- lavaan::cfa (grmsAAW4mod, data = dfGRMSAAW)
lavaan::summary(grmsAAW4fit, fit.measures=TRUE, standardized=TRUE, rsquare = TRUE)
semPlot::semPaths(grmsAAW4fit, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
grmsAAW4stdzd <- update (grmsAAW4fit, std.lv = TRUE, std.ov = TRUE, meanstructure = TRUE)
grmsAAW4table <- semTable::semTable(list ("Ordinary" =grmsAAW4fit, "Standardized" = grmsAAW4stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "grmsAAW4table", type = "csv", print.results = TRUE)
lavaan::fitted(grmsAAW4fit)
#lavaan::residuals(grmsAAW4fit, type = "raw")
#lavaan::residuals(grmsAAW4fit, type = "standardized")
#lavaan::residuals(grmsAAW4fit, type = "cor")
#lavaan::modindices(grmsAAW4fit)
lavaan::fitted(grmsAAW4fit)
#lavaan::residuals(grmsAAW4fit, type = "raw")
#lavaan::residuals(grmsAAW4fit, type = "standardized")
#lavaan::residuals(grmsAAW4fit, type = "cor")
#lavaan::modindices(grmsAAW4fit)
lavaan::fitted(grmsAAW4fit)
#lavaan::residuals(grmsAAW4fit, type = "raw")
#lavaan::residuals(grmsAAW4fit, type = "standardized")
lavaan::residuals(grmsAAW4fit, type = "cor")
#lavaan::modindices(grmsAAW4fit)
209-203 #subtract df
1004.136 - 220.858 #subtract chi-square values
qchisq(.05, 6, lower.tail=FALSE)
lavaan::lavTestLRT(grmsAAW1fit, grmsAAW4fit)
#All the requested data gets transferred over, but the pattern coefficients do not end up side-by-side.  This is because one is unidimensional, the other multidimensional. More instructions here:  http://www.crmda.dept.ku.edu/timeline/archives/193
grmsAAWtables <- semTable::semTable(list("Single Dimension" = grmsAAW1fit, "Multidimensional" = grmsAAW4fit), columns = c("eststars", "se", "p"),  columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "grmsAAWtables", type = "csv", print.results = TRUE)
GRMSAAWstdzd <- semTable::semTable(list("Single Dimension" = grmsAAW1stdzd, "Multidimensional" = grmsAAW4stdzd), columns = c("eststars"),  columnLabels = c(eststars = "Estimate"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "GRMSAAWstzd", type = "csv", print.results = TRUE)
grmsAAW1table <- semTable::semTable(list ("Ordinary" = grmsAAW1fit, "Standardized" = grmsAAW1stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"),  varLabels = v1, file = "grmsAAW1table", type = "csv", print.results = FALSE )
#print.results = TRUE #Can add to see in the script
grmsAAW4table <- semTable::semTable(list ("Ordinary" =grmsAAW4fit, "Standardized" = grmsAAW4stdzd), columns = list ("Ordinary" = c("eststars", "se", "p"), "Standardized" = c("est")), columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "grmsAAW4table", type = "csv", print.results = FALSE )
#Can change "print.results" to TRUE if you want to see the (messy) output in the .rmd file (it's easier to read the lavaan output).
#All the requested data gets transferred over, but the pattern coefficients do not end up side-by-side.  This is because one is unidimensional, the other multidimensional. More instructions here:  http://www.crmda.dept.ku.edu/timeline/archives/193
grmsAAWtables <- semTable::semTable(list("Single Dimension" = grmsAAW1fit, "Multidimensional" = grmsAAW4fit), columns = c("eststars", "se", "p"),  columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "grmsAAWtables", type = "csv", print.results = FALSE )
#Can change "print.results" to TRUE if you want to see the (messy) output in the .rmd file (it's easier to read the lavaan output).)
GRMSAAWstdzd <- semTable::semTable(list("Single Dimension" = grmsAAW1stdzd, "Multidimensional" = grmsAAW4stdzd), columns = c("eststars"),  columnLabels = c(eststars = "Estimate"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "GRMSAAWstzd", type = "csv", print.results = FALSE )
#Can change "print.results" to TRUE if you want to see the (messy) output in the .rmd file (it's easier to read the lavaan output).
#Can we get all 4 columns?  Not yet...a work in progress.
grmsAAW4cols <- semTable::semTable(list("Undimensional" = grmsAAW1fit, "Uni Standardized" = grmsAAW1stdzd, "Multidimensional" = grmsAAW4fit, "Mult Standardized" = grmsAAW4stdzd), columns = list ("Unidimensional" =c("eststars", "se", "p"), "Uni Standardized" = c("est"), "Multidimensional" = c("eststars", "se", "p"), "Mult Standardized" =c("est")),  columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value", est = "Standardized"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "GRMSAAW4cols", type = "csv", print.results = FALSE )
grmsAAW4mod  <- 'AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4'
grmsAAW4mod
#next, use the cfa function to apply the model to the data
uncorrF <- lavaan::cfa(grmsAAW4mod, data = dfGRMSAAW, orthogonal = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(lavaanPlot)){install.packages("lavaanPlot")}
#if(!require(psych)){install.packages("psych")}
#if(!require(semTable)){install.packages("semTable")}
#The GRMSAAW has two scales:  frequency and stress appraisal. This simulation is for the frequency scale.
set.seed(210927)
GRMSAAWmat <- matrix(c(.83, .79, .75, .72, .70, .69, .69, .69, .63, -.06, -.01, -.02, .21, -.03, -.04, .02, .05, .17, .05, .01, .00, -.06,
.07, -.03, -.06, -.02, .08, -.06, -.01, -.03, .13, .85, .76, .75, .70, .10, -.12, -.06, .01, .06, -.06, -.04, .07, .18,
-.11, -.06, .04, .02, -.03, .04, .15, .08, -.03, -.10, .11, .13, -.13, .69, .63, .61, .54, .46, -.05, -.02, .14, .14,
.03, .05, -.01, -.06, .04, .08, -.13, .03, .02, .07, .06, -.11, -.02, -.08, .13, .09, -.04, -.03, .90, .79, .62, .51), ncol=4) #primary factor loadings for the four factors taken from Table 2 of the manuscript
rownames(GRMSAAWmat) <- c("AS1", "AS2", "AS3", "AS4", "AS5", "AS6", "AS7", "AS8", "AS9", "AF1", "AF2", "AF3", "AF4", "MI1", "MI2", "MI3", "MI4", "MI5", "AUA1", "AUA2", "AUA3", "AUA4") #variable names for the items
colnames(GRMSAAWmat) <- c("Submissiveness", "Fetishism", "Media", "Appearance") #component (subscale) names
GRMSAAWCorMat <- GRMSAAWmat %*% t(GRMSAAWmat) #create the correlation matrix via some matrix algebra
diag(GRMSAAWCorMat) <- 1
#SzyCorMat #prints the correlation matrix
GRMSAAW_M <- c(2.91,	3.3,	3.45,	2.85,	3.89,	3.11,	3.83,	3.07,	2.88, 3.3, 3.64,	3.21,	3.21, 4.2,	4.8,	4.7,	4.5,	4.89, 4.47,	4.69,	4.47,	4.45) #Means estimated from the information in Table 4. I divided the M by the number of items in each scale then "jittered" the number of values I needed around that mean.
GRMSAAW_SD <- c(1.21,	0.81,	1.34,	1.62,	1.89,	0.93,	1.01,	1.17,	1.22, 1.28,	1.47,	1.45,	1.34, 0.78,	0.93,	0.96,	0.88,	0.91, 1.13,	1.15,	1.11,	1.09) #SDs estimated from the information in Table 4. I divided the SD by the number of items in each scale then "jittered" the number of values I needed around that SD
GRMSAAWCovMat <- GRMSAAW_SD %*% t(GRMSAAW_SD) * GRMSAAWCorMat #creates a covariance matrix (with more matrix algebra) from the correlation matrix
dfGRMSAAW <- as.data.frame(round(MASS::mvrnorm(n=304, mu = GRMSAAW_M, Sigma = GRMSAAWCovMat,  empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix; wrapped in commands to round to 0 decimal places and format as a df
dfGRMSAAW[dfGRMSAAW>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfGRMSAAW[dfGRMSAAW<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#Below is code if you would like an ID number for each case. Expecially at first, the ID number would just need to be removed, so I will not include it in the original simulation. We will add it later.
#library(tidyverse)
#dfGRMSAAW <- dfGRMSAAW %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfGRMSAAW <- dfGRMSAAW %>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
psych::describe(dfGRMSAAW)
#write the simulated data  as a .csv
#write.table(dfGRMSAAW, file="dfGRMSAAW.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#dfGRMSAAW <- read.csv ("dfGRMSAAW.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(dfGRMSAAW, "dfGRMSAAW.rds")
#bring back the simulated dat from an .rds file
#dfGRMSAAW <- readRDS("dfGRMSAAW.rds")
grmsAAW4mod  <- 'AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4'
grmsAAW4mod
#next, use the cfa function to apply the model to the data
uncorrF <- lavaan::cfa(grmsAAW4mod, data = dfGRMSAAW, orthogonal = TRUE)
lavaan::summary(uncorrF, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
semPlot::semPaths(uncorrF, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
#in our 4-factor models we can use the same baseM, the difference here is that we deleted "orthogonal = TRUE"
#uncorrF <- lavaan::cfa(grmsAAW4mod, data = dfGRMSAAW, orthogonal = TRUE) #for comparison, this was the uncorrelated model
corrF <- lavaan::cfa (grmsAAW4mod, data = dfGRMSAAW)
lavaan::summary(corrF, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
semPlot::semPaths(corrF, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
lavaan::lavTestLRT(uncorrF, corrF)
lavaan::summary(corrF, fit.measures = TRUE, standardized = TRUE)
lavaan::modindices(corrF, sort=TRUE)
lavaan::modindices(corrF, sort=TRUE, minimum.value = 4)
ModInd_M1  <- 'AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9 + AF4
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4'
ModInd_M1
ModInd_M1f <- lavaan::cfa(ModInd_M1, data = dfGRMSAAW)
lavaan::summary(ModInd_M1f, fit.measures = TRUE, standardized = TRUE)
lavaan::lavTestLRT(uncorrF, corrF, ModInd_M1f)
semPlot::semPaths(ModInd_M1f, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
lavaan::modindices(corrF, sort=TRUE)
lavaan::modindices(ModInd_M1f, sort.=TRUE, minimum.value = 4)
lavaan::modindices(corrF, sort=TRUE, minimum.value = 4)
ModInd_M2  <- 'AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4
#freeing errors to covary by specifying a covariance
AF3~~MI1
'
ModInd_M2
ModInd_M2f <- lavaan::cfa(ModInd_M2, data = dfGRMSAAW)
lavaan::summary(ModInd_M2f, fit.measures = TRUE, standardized = TRUE)
lavaan::lavTestLRT(uncorrF, corrF, ModInd_M2f)
semPlot::semPaths(ModInd_M2f, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
lavaan::modindices(ModInd_M2f, sort = TRUE)
secondM  <- 'AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4
GRMS =~ AS + AF + MI + AUA'
secondM
secondF <- lavaan::cfa (secondM, data = dfGRMSAAW)
lavaan::summary(secondF, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
semPlot::semPaths(secondF, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
lavaan::lavTestLRT(uncorrF, corrF, secondF)
lavaan::lavTestLRT(uncorrF, corrF, secondF)
lavaan::modindices(secondF, sort=TRUE, minimum.value = 4)
bifacM  <- ' GRMS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9 + AF1 + AF2 + AF3 + AF4 + MI1 + MI2 + MI3 + MI4 + MI5 + AUA1 + AUA2 + AUA3 + AUA4
AS =~ AS1 + AS2 + AS3 + AS4 + AS5 + AS6 + AS7 + AS8 + AS9
AF =~ AF1 + AF2 + AF3 + AF4
MI =~ MI1 + MI2 + MI3 + MI4 + MI5
AUA =~ AUA1 + AUA2 + AUA3 + AUA4
#fixes the relations between g and each of the factors to 0.0
GRMS ~~ 0*AS
GRMS ~~ 0*AF
GRMS ~~ 0*MI
GRMS ~~ 0*AUA
#fixes the relations (covariances) between each of the factors to 0.0
AS ~~ 0*AF
AS ~~ 0*MI
AS ~~ 0*AUA
AF ~~ 0*MI
AF ~~ 0*AUA
MI ~~ 0*AUA
'
bifacM
#On the first run I received a warning; it is not uncommon to add the statement "check.gradient=FALSE" to force a solution. Then it is important to closely inspect the results to see if things look ok.
#If you get really stuck it is possible to change optimizers through control statements
bifacF <- lavaan::cfa(bifacM, data = dfGRMSAAW, check.gradient=FALSE)
lavaan::summary(bifacF, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
semPlot::semPaths(bifacF, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
m = matrix (nrow = 3, ncol = 22)
m[1, ] = c(0,0,0,0,24,0,0,0,0,0,25,0,0,0,0,26,0,0,0,0,27,0)
m[2, ] = 1:22
m[3, ] = c(0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0)
m
semPlot::semPaths(bifacF, "model", "std", layout = m, residuals = FALSE, exoCov = FALSE)
lavaan::lavTestLRT(uncorrF, corrF, secondF, bifacF)
lavaan::lavTestLRT(secondF, bifacF)
v1 <- c(AS1 = "Others expect me to be submissive", AS2 = "Others have been surprised when I disagree with them", AS3 = "Others take my silence as a sign of compliance", AS4 = "Others have been surprised when I do things independent of my family", AS5 = "Others have implied that AAW seem content for being a subordinate", AS6 = "Others treat me as if I will always comply with their requests", AS7 = "Others expect me to sacrifice my own needs to take care of others (e.g., family, partner) ecause I am an AAW", AS8 = "Others have hinted that AAW are not assertive enough to be leaders", AS9 = "Others have hinted that AAW seem to have no desire for leadership", AF1 = "Others express sexual interest in me because of my Asian appearance", AF2 = "Others take sexual interest in AAW to fulfill their fantasy", AF3 = "Others take romantic interest in AAW just because they never had sex with an AAW before", AF4 = "Others have treated me as if I am always open to sexual advances", MI1 = "I see non-Asian women being casted to play female Asian characters", MI2 = "I rarely see AAW playing the lead role in the media", MI3 = "I rarely see AAW in the media", MI4 = "I see AAW playing the same type of characters (e.g., Kung Fu woman, sidekick, mistress, tiger mom) in the media", MI5 = "I see AAW charaters being portrayed as emotionally distanct (e.g., cold-hearted, lack of empathy) in the media", AUA1 = "Others have talked about AAW as if they all have the same facial features (e.g., eye shape, skin tone)", AUA2 = "Others have suggested that all AAW look alike", AUA3 = "Others have talked about AAW as if they all have the same body type (e.g., petite, tiny, small-chested", AUA4 = "Others have pointed out physical traits in AAW that do not look 'Asian'")
grmsAAW_Nested1table <- semTable::semTable(list("Uncorrelated" = uncorrF, "Correlated" = corrF, "second-order" = secondF, "Bifactor" = bifacF),columns = c("eststars"),  columnLabels = c(eststars = "Estimate"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = v1, file = "grmsAAWNested", type = "csv", print.results = FALSE )
#Can change "print.results" to TRUE if you want to see the (messy) output in the .rmd file (it's easier to read the lavaan output).
psych::omegaFromSem(bifacF)
semTools::reliability(bifacF, return.total=TRUE)
psych::omegaFromSem(secondF)
semTools::reliabilityL2(secondF, 'GRMS')
semTools::reliability(secondF)
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
psych::describe(dfGRMS)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(MASS)){install.packages("MASS")}
#if(!require(sjstats)){install.packages("sjstats")}
#if(!require(apaTables)){install.packages("apaTables")}
#if(!require(qualtRics)){install.packages("qualtRics")}
set.seed(210921)
GRMSmat <- matrix(c(.69, .69, .60, .59, .55, .55, .54, .50, .41, .41, .04, -.15, .06, .12, .20, -.01, -.22, -.02, .02, .12, -.09, .06, .19, -.03, -.13,
.07, -.07, .00, .07, -.18, .22, .23, -.01, .03, .02, .93, .81, .69, .67, .61, .58, .54, -.04, -.07, -.04, .00, .19, .00, .04, .08,
-.08, -.08, 00, .06, .16, -.06, .08, .16, .22, .23, -.04, .01, -.05, -.11, -.16, .25, .16, .59, .55, .54, .54, .51, -.12, .08, .03,
-.06, .03, .16, .01, .05, .09, -.08, -.06, .07, -.03, -.08, .18, .03, .06, .06, -.21, .21, .21, .03, -.06, .26, -.14, .70, .69, .68), ncol=4) #primary factor loadings for the four factors
rownames(GRMSmat) <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10", "Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(GRMSmat) <- c("Objectified", "Marginalized", "Strong", "Angry")
GRMSCorMat <- GRMSmat %*% t(GRMSmat) #create the correlation matrix
diag(GRMSCorMat) <- 1
#SzyCorMat #prints the correlation matrix
GRMS_M <- c(1.78,	1.85,	1.97,	1.93,	2.01,	1.76,	1.91,	2.22,	1.83,	1.88, 2,	3.5,	2.43,	3.44,	2.39,	2.89,	2.7, 1.28,	2.25,	1.45,	1.57,	1.4, 2.02,	2.53,	2.39) #item means; I made these up based on the M and SDs for the factors
GRMS_SD <- c(1.11,	1.23,	0.97,	0.85,	1.19,	1.32,	1.04,	0.98,	1.01,	1.03, 1.01,	0.97,	1.32,	1.24,	1.31,	1.42,	1.2, 0.85,	0.94,	0.78,	1.11,	0.84, 1.14,	1.2,	1.21) #item standard deviations; I made these up based on the M and SDs for the factors
GRMSCovMat <- GRMS_SD %*% t(GRMS_SD) * GRMSCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
dfGRMS <- as.data.frame(round(MASS::mvrnorm(n=259, mu = GRMS_M, Sigma = GRMSCovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix
dfGRMS[dfGRMS>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfGRMS[dfGRMS<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#colMeans(GRMS) #displays column means
#Below is code if you would like and ID number. For this lesson's purposes and ID number would just need to be removed, so I will not include it in the original simulation.
#library(tidyverse)
#dfGRMS <- dfGRMS %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfGRMS <- dfGRMS%>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
psych::describe(dfGRMS)
#write the simulated data  as a .csv
#write.table(dfGRMS, file="dfGRMS.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#dfGRMS <- read.csv ("dfGRMS.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(dfGRMS, "dfGRMS.rds")
#bring back the simulated dat from an .rds file
#dfGRMS <- readRDS("dfGRMS.rds")
psych::describe(dfGRMS)
GRMSr <- cor(dfGRMS) #correlation matrix (with the negatively scored item already reversed) created and saved as object
round(GRMSr, 2)
#round(GRMSr[,1:8], 2)
#round(GRMSr[,9:16], 2)
#round(GRMSr[,17:25], 2)
psych::KMO(dfGRMS)
#psych::KMO(GRMSr) #for the KMO function, do not specify sample size if using the matrix form of the data
psych::cortest.bartlett(dfGRMS) #from the raw data
#raw data produces the warning "R was not square, finding R from data." This means nothing other than we fed it raw data and the function is creating a matrix from which to do the analysis.
#psych::cortest.bartlett(GRMSr, n = 259) #if using the matrix, must specify sample size
#det(GRMSr)
det(cor(dfGRMS))#if using the raw data
#grmsPAF1 <- psych::fa(GRMSr, nfactors=10, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(dfGRMS, nfactors = 10, fm = "pa", max.iter = 100, rotate = "none")# using raw data and specifying the max number of factors
#I received the warning "maximum iteration exceeded". It gave output, but it's best if we don't get that warning, so I increased it to 100.
grmsPAF1 #this object holds a great deal of information
3.51/25
names(grmsPAF1)
plot(grmsPAF1$values, type = "b") #type = "b" gives us "both" lines and points;  type = "l" gives lines and is relatively worthless
#grmsPAF2 <- psych::fa(GRMSr, nfactors=4, fm = "pa", rotate="none")
grmsPAF2 <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "none") #can copy prior script, but change nfactors and object name
grmsPAF2
names(grmsPAF2)
mean(grmsPAF2$communality)
#sum(grmsPAF2$communality) #checking my work by calculating the sum and dividing by 25
#9.836131/25
round(psych::factor.model(grmsPAF2$loadings), 3)#produces the reproduced correlation matrix
.41 - .426
round(psych::factor.residuals(GRMSr, grmsPAF2$loadings), 3)
grmsPAF2_resids <- psych::factor.residuals(GRMSr, grmsPAF2$loadings)#first extract the resids
grmsPAF2_resids <- as.matrix(grmsPAF2_resids[upper.tri(grmsPAF2_resids)])#the object has the residuals in a single column
head(grmsPAF2_resids)
large.resid <- abs(grmsPAF2_resids) > 0.05
#large.resid
sum(large.resid)
round(sum(large.resid) / nrow(grmsPAF2_resids),3)
round(sqrt(mean(grmsPAF2_resids^2)), 3)
hist(grmsPAF2_resids)
#grmsPAF2ORTH <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH
grmsPAF2_table <- psych::print.psych(grmsPAF2ORTH, cut = 0.3, sort = TRUE)
psych::fa.diagram(grmsPAF2ORTH)
#names(grmsPAF2ORTH)
pafORTH_table <- round(grmsPAF2ORTH$loadings,3)
write.table(pafORTH_table, file="pafORTH_table.csv", sep=",", col.names=TRUE, row.names=FALSE)
pafORTH_table
#grmsPAF2obl <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl
psych::print.psych(grmsPAF2obl, cut = 0.3, sort=TRUE)
grmsPAF2obl$loadings %*% grmsPAF2obl$Phi
#Field's function to produce the structure matrix
factor.structure <- function(fa, cut = 0.2, decimals = 2){
structure.matrix <- psych::fa.sort(fa$loadings %*% fa$Phi)
structure.matrix <- data.frame(ifelse(abs(structure.matrix) < cut, "", round(structure.matrix, decimals)))
return(structure.matrix)
}
factor.structure(grmsPAF2obl, cut = 0.3)
#in all of this, don't forget to be specifiying the datset that has the reverse-coded item replaced
grmsPAF2obl <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "oblimin", scores = TRUE)
head(grmsPAF2obl$scores, 10) #shows us only the first 10 (of N = 2571)
set.seed(211023)
AMS_Imat <- matrix(c(.74, .75, .65, .58, .62, .01, .05, -.08, .00, .03, .01, .04, .25, -.06, -.02, .11, .18, .25, .26, .14,
-.03, .00, .20, -.07, .15, .71, .52, .47, .02, .04, .00, -.01, .01, -.18, .07, .14, -.17, .05, -.12,.16,
.11, -.07, -.03, .20, .03, .00, .07, .15, .91, .85, .64, .56, .42, .04, .04, -.15, .03, .13, .07, .14,
-.12, .06, .16, -.01, .02, -.07, .05, .20, -.01, .01, .19, .16, .21, .89, .73, .70, .46, .41, .40, .32), ncol=4) #primary factor loadings for the four factors taken from Table 2 of the manuscript
rownames(AMS_Imat) <- c("Help1", "Help2", "Help3", "Help4", "Help5", "Min1", "Min2", "Min3", "Pers1", "Pers2", "Pers3", "Pers4", "Pers5", "Oth1", "Oth2", "Oth3", "Oth4", "Oth5","Oth6", "Oth7") #variable names for the items
colnames(AMS_Imat) <- c("Helplessness", "Minimization", "Personhood", "Otherization") #component (subscale) names
AMS_ICorMat <- AMS_Imat %*% t(AMS_Imat) #create the correlation matrix via some matrix algebra
diag(AMS_ICorMat) <- 1
#SzyCorMat #prints the correlation matrix
AMS_iM <- c(1.95, 1.74, 2.11, 1.61, 2.13, 3.28, 3.02, 2.09, 1.63, 1.43, 1.48, 1.44, 1.71, .89, 1.35, 1.06, 1.39, 1.15, .91, 1.42) #item means from Table 2
AMS_iSD <- c(1.54, 1.56, 1.52, 1.61, 1.64, 1.85, 1.54, 1.82, 1.56, 1.51, 1.60, 1.64, 1.55, 1.34, 1.46, 1.50, 1.63, 1.42, 1.29, 1.52) #item standard deviations from Table 2
AMS_ICovMat <- AMS_iSD %*% t(AMS_iSD) * AMS_ICorMat #creates a covariance matrix (with more matrix algebra) from the correlation matrix
dfAMSi <- as.data.frame(round(MASS::mvrnorm(n=833, mu = AMS_iM, Sigma = AMS_ICovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix; wrapped in commands to round to 0 decimal places and format as a df
dfAMSi[dfAMSi>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfAMSi[dfAMSi<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#Scoring the AMS
AMS_vars <- c("Help1", "Help2", "Help3", "Help4", "Help5", "Min1", "Min2", "Min3", "Pers1", "Pers2", "Pers3", "Pers4", "Pers5", "Oth1", "Oth2", "Oth3", "Oth4", "Oth5","Oth6", "Oth7")
dfAMSi$AMSm <- sjstats::mean_n(dfAMSi[,AMS_vars], .80)#Even though our simulation resulted in no missingness, I like to let the "score if there is <80% missing" script to ride along. It doesn't hurt anything
#Rank ordering the AMSm scores (i.e., mean of AMS) and assigning groups
dfAMSi$Rank <- rank(dfAMSi$AMSm)
library(tidyverse) #opening this package so I can pipe
dfAMSi <- dfAMSi %>%
mutate(Severity = case_when(
Rank <= 548 ~"Mild",
Rank >548 ~"Severe"
))
dfAMSi[,'Severity'] <- as.factor(dfAMSi[,'Severity'])#making it a factor
#Checking to see if the counts are right
#dfAMSi %>%
#count(Severity) #Given the ties among ranks, we end up with 537 in the mild condition and 296 in the severe condition; we'll go with it
#Below is code if you would like an ID number for each case. Expecially at first, the ID number would just need to be removed, so I will not include it in the original simulation. We will add it later.
#library(tidyverse)
#dfAMSi <- dfAMSi %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfAMSi <- dfAMSi %>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
psych::describe(dfAMSi)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
set.seed(211023)
AMS_Imat <- matrix(c(.74, .75, .65, .58, .62, .01, .05, -.08, .00, .03, .01, .04, .25, -.06, -.02, .11, .18, .25, .26, .14,
-.03, .00, .20, -.07, .15, .71, .52, .47, .02, .04, .00, -.01, .01, -.18, .07, .14, -.17, .05, -.12,.16,
.11, -.07, -.03, .20, .03, .00, .07, .15, .91, .85, .64, .56, .42, .04, .04, -.15, .03, .13, .07, .14,
-.12, .06, .16, -.01, .02, -.07, .05, .20, -.01, .01, .19, .16, .21, .89, .73, .70, .46, .41, .40, .32), ncol=4) #primary factor loadings for the four factors taken from Table 2 of the manuscript
rownames(AMS_Imat) <- c("Help1", "Help2", "Help3", "Help4", "Help5", "Min1", "Min2", "Min3", "Pers1", "Pers2", "Pers3", "Pers4", "Pers5", "Oth1", "Oth2", "Oth3", "Oth4", "Oth5","Oth6", "Oth7") #variable names for the items
colnames(AMS_Imat) <- c("Helplessness", "Minimization", "Personhood", "Otherization") #component (subscale) names
AMS_ICorMat <- AMS_Imat %*% t(AMS_Imat) #create the correlation matrix via some matrix algebra
diag(AMS_ICorMat) <- 1
#SzyCorMat #prints the correlation matrix
AMS_iM <- c(1.95, 1.74, 2.11, 1.61, 2.13, 3.28, 3.02, 2.09, 1.63, 1.43, 1.48, 1.44, 1.71, .89, 1.35, 1.06, 1.39, 1.15, .91, 1.42) #item means from Table 2
AMS_iSD <- c(1.54, 1.56, 1.52, 1.61, 1.64, 1.85, 1.54, 1.82, 1.56, 1.51, 1.60, 1.64, 1.55, 1.34, 1.46, 1.50, 1.63, 1.42, 1.29, 1.52) #item standard deviations from Table 2
AMS_ICovMat <- AMS_iSD %*% t(AMS_iSD) * AMS_ICorMat #creates a covariance matrix (with more matrix algebra) from the correlation matrix
dfAMSi <- as.data.frame(round(MASS::mvrnorm(n=833, mu = AMS_iM, Sigma = AMS_ICovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix; wrapped in commands to round to 0 decimal places and format as a df
dfAMSi[dfAMSi>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfAMSi[dfAMSi<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#Scoring the AMS
AMS_vars <- c("Help1", "Help2", "Help3", "Help4", "Help5", "Min1", "Min2", "Min3", "Pers1", "Pers2", "Pers3", "Pers4", "Pers5", "Oth1", "Oth2", "Oth3", "Oth4", "Oth5","Oth6", "Oth7")
dfAMSi$AMSm <- sjstats::mean_n(dfAMSi[,AMS_vars], .80)#Even though our simulation resulted in no missingness, I like to let the "score if there is <80% missing" script to ride along. It doesn't hurt anything
#Rank ordering the AMSm scores (i.e., mean of AMS) and assigning groups
dfAMSi$Rank <- rank(dfAMSi$AMSm)
library(tidyverse) #opening this package so I can pipe
dfAMSi <- dfAMSi %>%
mutate(Severity = case_when(
Rank <= 548 ~"Mild",
Rank >548 ~"Severe"
))
dfAMSi[,'Severity'] <- as.factor(dfAMSi[,'Severity'])#making it a factor
#Checking to see if the counts are right
#dfAMSi %>%
#count(Severity) #Given the ties among ranks, we end up with 537 in the mild condition and 296 in the severe condition; we'll go with it
#Below is code if you would like an ID number for each case. Expecially at first, the ID number would just need to be removed, so I will not include it in the original simulation. We will add it later.
#library(tidyverse)
#dfAMSi <- dfAMSi %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfAMSi <- dfAMSi %>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
View(dfAMSi)
psych::describe(dfAMSi)
AMS4CorrMod <-  '
Helplessness =~ Help1 + Help2 + Help3 + Help4 + Help5
Minimization =~ Min1 + Min2 + Min3
DenialPersonhood =~ Pers1 + Pers2 + Pers3 + Pers4 + Pers5
Otherization =~ Oth1 + Oth2 + Oth3 + Oth4 + Oth5 + Oth6 + Oth7
'
AMS4CorrFit <- lavaan::cfa(AMS4CorrMod, data = dfAMSi)
lavaan::summary(AMS4CorrFit, fit.measures = TRUE, standardized = TRUE)
#item labels
#I took out commas internal to the items because the comma causes the text to split across columns in the exported .csv
AMSv1 <- c(Help1 = "People feel they need to do something to help me because I have a disability", Help2 = "People express admiration for me or describe me as inspirational simply because I live with a disability", Help3 = "People express pity for me because I have a disability", Help4 = "People do not expect me to have a job or volunteer activities because I have a disability", Help5 = "People offer me unsolicited unwanted or unneeded help because I have a disability", Min1 = "People are unwilling to accept that I have a disability because I appear able-bodied", Min2 = "People minimize my disability or suggest that it could be worse", Min3 = "People act as if accomodations for my disability are unnecessary", Pers1 = "People don't see me as a whole person because I have a disability", Pers2 = "People act as if I am nothing more than my disability", Pers3 = "People speak to me as if I am a child or do not take me seriously because I have a disability", Pers4 = "People assume I have low intelligence because I have a disability", Pers5 = "Because I have a disability people attempt to make decisions fro me that I could make myself", Oth1 = "People think I should not date or pursue sexual relationships because I have a disability", Oth2 = "People indicate they would not date a person with a disability", Oth3 = "People suggest that I cannot or should not have children because I have a disability", Oth4 = "People stare at me because I have a disability", Oth5 = "Because I have a disability people seem surprised to see me outside my home", Oth6 = "Because I have a disability people assume I have an extraordinary gift or talent",Oth7 = "People suggest that living with a disability would not be a worthwhile existence")
#put it in a table
AMS_Tables <- semTable::semTable(AMS4CorrFit, columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = AMSv1, file = "AMS_TAbles", type = "csv", print.results = FALSE)
#By changing print.results = TRUE, you can see the output below
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(MASS)){install.packages("MASS")}
#if(!require(sjstats)){install.packages("sjstats")}
#if(!require(psych)){install.packages("psych")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(lavaan)){install.packages("lavaan")}
#if(!require(semPlot)){install.packages("semPlot")}
#if(!require(semTable)){install.packages("semTable")}
set.seed(211023)
AMS_Imat <- matrix(c(.74, .75, .65, .58, .62, .01, .05, -.08, .00, .03, .01, .04, .25, -.06, -.02, .11, .18, .25, .26, .14,
-.03, .00, .20, -.07, .15, .71, .52, .47, .02, .04, .00, -.01, .01, -.18, .07, .14, -.17, .05, -.12,.16,
.11, -.07, -.03, .20, .03, .00, .07, .15, .91, .85, .64, .56, .42, .04, .04, -.15, .03, .13, .07, .14,
-.12, .06, .16, -.01, .02, -.07, .05, .20, -.01, .01, .19, .16, .21, .89, .73, .70, .46, .41, .40, .32), ncol=4) #primary factor loadings for the four factors taken from Table 2 of the manuscript
rownames(AMS_Imat) <- c("Help1", "Help2", "Help3", "Help4", "Help5", "Min1", "Min2", "Min3", "Pers1", "Pers2", "Pers3", "Pers4", "Pers5", "Oth1", "Oth2", "Oth3", "Oth4", "Oth5","Oth6", "Oth7") #variable names for the items
colnames(AMS_Imat) <- c("Helplessness", "Minimization", "Personhood", "Otherization") #component (subscale) names
AMS_ICorMat <- AMS_Imat %*% t(AMS_Imat) #create the correlation matrix via some matrix algebra
diag(AMS_ICorMat) <- 1
#SzyCorMat #prints the correlation matrix
AMS_iM <- c(1.95, 1.74, 2.11, 1.61, 2.13, 3.28, 3.02, 2.09, 1.63, 1.43, 1.48, 1.44, 1.71, .89, 1.35, 1.06, 1.39, 1.15, .91, 1.42) #item means from Table 2
AMS_iSD <- c(1.54, 1.56, 1.52, 1.61, 1.64, 1.85, 1.54, 1.82, 1.56, 1.51, 1.60, 1.64, 1.55, 1.34, 1.46, 1.50, 1.63, 1.42, 1.29, 1.52) #item standard deviations from Table 2
AMS_ICovMat <- AMS_iSD %*% t(AMS_iSD) * AMS_ICorMat #creates a covariance matrix (with more matrix algebra) from the correlation matrix
dfAMSi <- as.data.frame(round(MASS::mvrnorm(n=833, mu = AMS_iM, Sigma = AMS_ICovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix; wrapped in commands to round to 0 decimal places and format as a df
dfAMSi[dfAMSi>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfAMSi[dfAMSi<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#Scoring the AMS
AMS_vars <- c("Help1", "Help2", "Help3", "Help4", "Help5", "Min1", "Min2", "Min3", "Pers1", "Pers2", "Pers3", "Pers4", "Pers5", "Oth1", "Oth2", "Oth3", "Oth4", "Oth5","Oth6", "Oth7")
dfAMSi$AMSm <- sjstats::mean_n(dfAMSi[,AMS_vars], .80)#Even though our simulation resulted in no missingness, I like to let the "score if there is <80% missing" script to ride along. It doesn't hurt anything
#Rank ordering the AMSm scores (i.e., mean of AMS) and assigning groups
dfAMSi$Rank <- rank(dfAMSi$AMSm)
library(tidyverse) #opening this package so I can pipe
dfAMSi <- dfAMSi %>%
mutate(Severity = case_when(
Rank <= 548 ~"Mild",
Rank >548 ~"Severe"
))
dfAMSi[,'Severity'] <- as.factor(dfAMSi[,'Severity'])#making it a factor
#Checking to see if the counts are right
#dfAMSi %>%
#count(Severity) #Given the ties among ranks, we end up with 537 in the mild condition and 296 in the severe condition; we'll go with it
#Below is code if you would like an ID number for each case. Expecially at first, the ID number would just need to be removed, so I will not include it in the original simulation. We will add it later.
#library(tidyverse)
#dfAMSi <- dfAMSi %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfAMSi <- dfAMSi %>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
psych::describe(dfAMSi)
#write the simulated data  as a .csv
#rite.table(dfAMSi, file="dfAMSi.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#dfAMSi <- read.csv ("dfAMSi.csv", header = TRUE)
#str(dfAMSi)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(dfAMSi, "dfAMSi.rds")
#bring back the simulated dat from an .rds file
#dfAMSi <- readRDS("dfAMSi.rds")
#str(dfAMSi)
#item labels
#I took out commas internal to the items because the comma causes the text to split across columns in the exported .csv
AMSv1 <- c(Help1 = "People feel they need to do something to help me because I have a disability", Help2 = "People express admiration for me or describe me as inspirational simply because I live with a disability", Help3 = "People express pity for me because I have a disability", Help4 = "People do not expect me to have a job or volunteer activities because I have a disability", Help5 = "People offer me unsolicited unwanted or unneeded help because I have a disability", Min1 = "People are unwilling to accept that I have a disability because I appear able-bodied", Min2 = "People minimize my disability or suggest that it could be worse", Min3 = "People act as if accomodations for my disability are unnecessary", Pers1 = "People don't see me as a whole person because I have a disability", Pers2 = "People act as if I am nothing more than my disability", Pers3 = "People speak to me as if I am a child or do not take me seriously because I have a disability", Pers4 = "People assume I have low intelligence because I have a disability", Pers5 = "Because I have a disability people attempt to make decisions fro me that I could make myself", Oth1 = "People think I should not date or pursue sexual relationships because I have a disability", Oth2 = "People indicate they would not date a person with a disability", Oth3 = "People suggest that I cannot or should not have children because I have a disability", Oth4 = "People stare at me because I have a disability", Oth5 = "Because I have a disability people seem surprised to see me outside my home", Oth6 = "Because I have a disability people assume I have an extraordinary gift or talent",Oth7 = "People suggest that living with a disability would not be a worthwhile existence")
#put it in a table
AMS_Tables <- semTable::semTable(AMS4CorrFit, columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = AMSv1, file = "AMS_TAbles", type = "csv", print.results = FALSE)
AMS4CorrMod <-  '
Helplessness =~ Help1 + Help2 + Help3 + Help4 + Help5
Minimization =~ Min1 + Min2 + Min3
DenialPersonhood =~ Pers1 + Pers2 + Pers3 + Pers4 + Pers5
Otherization =~ Oth1 + Oth2 + Oth3 + Oth4 + Oth5 + Oth6 + Oth7
'
AMS4CorrFit <- lavaan::cfa(AMS4CorrMod, data = dfAMSi)
lavaan::summary(AMS4CorrFit, fit.measures = TRUE, standardized = TRUE)
#item labels
#I took out commas internal to the items because the comma causes the text to split across columns in the exported .csv
AMSv1 <- c(Help1 = "People feel they need to do something to help me because I have a disability", Help2 = "People express admiration for me or describe me as inspirational simply because I live with a disability", Help3 = "People express pity for me because I have a disability", Help4 = "People do not expect me to have a job or volunteer activities because I have a disability", Help5 = "People offer me unsolicited unwanted or unneeded help because I have a disability", Min1 = "People are unwilling to accept that I have a disability because I appear able-bodied", Min2 = "People minimize my disability or suggest that it could be worse", Min3 = "People act as if accomodations for my disability are unnecessary", Pers1 = "People don't see me as a whole person because I have a disability", Pers2 = "People act as if I am nothing more than my disability", Pers3 = "People speak to me as if I am a child or do not take me seriously because I have a disability", Pers4 = "People assume I have low intelligence because I have a disability", Pers5 = "Because I have a disability people attempt to make decisions fro me that I could make myself", Oth1 = "People think I should not date or pursue sexual relationships because I have a disability", Oth2 = "People indicate they would not date a person with a disability", Oth3 = "People suggest that I cannot or should not have children because I have a disability", Oth4 = "People stare at me because I have a disability", Oth5 = "Because I have a disability people seem surprised to see me outside my home", Oth6 = "Because I have a disability people assume I have an extraordinary gift or talent",Oth7 = "People suggest that living with a disability would not be a worthwhile existence")
#put it in a table
AMS_Tables <- semTable::semTable(AMS4CorrFit, columnLabels = c(eststars = "Estimate", se = "SE", p = "p-value"), fits = c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "aic", "bic"), varLabels = AMSv1, file = "AMS_TAbles", type = "csv", print.results = FALSE)
#By changing print.results = TRUE, you can see the output below
View(dfAMSi)
View(dfAMSi)
mild_df <- subset(dfAMSi, Severity == "Mild")
severe_df <- subset(dfAMSi, Severity == "Severe")
MildFit <- lavaan::cfa(AMS4CorrMod, data = mild_df
lavaan::summary(Mild, fit.measures = TRUE, standardized = TRUE)
MildFit <- lavaan::cfa(AMS4CorrMod, data = mild_df)
lavaan::summary(Mild, fit.measures = TRUE, standardized = TRUE)
MildFit <- lavaan::cfa(AMS4CorrMod, data = mild_df)
lavaan::summary(MildFit, fit.measures = TRUE, standardized = TRUE)
SevereFit <- lavaan::cfa(AMS4CorrMod, data = severe_df)
lavaan::summary(SevereFit, fit.measures = TRUE, standardized = TRUE)
