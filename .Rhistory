Stig_othR <- psych::corr.test(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
Stig_othR <- as.data.frame(Stig_othR$r)#extracts the "r" matrix and makes it a df
Stig_othR$Items <- c("cold", "unresponsive", "unsupportive", "StigmaT1")#Assigning names to the items
Stig_othR <- Stig_othR[!Stig_othR$Items == "StigmaT1",]#Removing the subscale score as a a row in the df
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
Stig_othR[, 'ResponseT1'] <- NA #We need a column for this to bind the items later
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
STIGalpha <- psych::alpha(StigmaT1)
STIGalpha
STIGalpha <- as.data.frame(STIGalpha$item.stats)#Grabbing the alpha objet we created earlier and making it a df
STIGalpha$Items <- c("negative", "heterosexism", "harassed")
Resp_othR <- Resp_othR[!Resp_othR$Items == "ResponseT1",]#Removing the subscale score as a a row in the df
#Combining these four dfs
ResponseStats <- full_join(RESPalpha, Stig_othR, by = "Items")
View(ResponseStats)
StigmaStats <- full_join(STIGalpha, Resp_othR, by "Items")
StigmaStats <- full_join(STIGalpha, Resp_othR, by = "Items")
ResponseStats <- (select(ResponseStats, Items, ResponseT1, StigmaT1))
StigmaStats <- (select(StigmaStats, Items, ResponseT1, StigmaT1))
View(StigmaStats)
RESPalpha <- psych::alpha(ResponseT1)
RESPalpha
STIGalpha <- psych::alpha(StigmaT1)
STIGalpha
Resp_othR <- psych::corr.test(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
Resp_othR <- as.data.frame(Resp_othR$r)#extracts the "r" matrix and makes it a df
Resp_othR$Items <- c("negative", "heterosexism", "harassed", "ResponseT1")#Assigning names to the items
Resp_othR <- Resp_othR[!Resp_othR$Items == "ResponseT1",]#Removing the subscale score as a a row in the df
Resp_othR[, 'StigmaT1'] <- NA #We need a column for this to bind the items later
Resp_othR <- (select(Resp_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
RESPalpha <- as.data.frame(RESPalpha$item.stats)#Grabbing the alpha objet we created earlier and making it a df
RESPalpha$Items <- c("cold", "unresponsive", "unsupportive")
Stig_othR <- psych::corr.test(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
Stig_othR <- as.data.frame(Stig_othR$r)#extracts the "r" matrix and makes it a df
Stig_othR$Items <- c("cold", "unresponsive", "unsupportive", "StigmaT1")#Assigning names to the items
Stig_othR <- Stig_othR[!Stig_othR$Items == "StigmaT1",]#Removing the subscale score as a a row in the df
Stig_othR[, 'ResponseT1'] <- NA #We need a column for this to bind the items later
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
STIGalpha <- as.data.frame(STIGalpha$item.stats)#Grabbing the alpha objet we created earlier and making it a df
STIGalpha$Items <- c("negative", "heterosexism", "harassed")
#Combining these four dfs
ResponseStats <- full_join(RESPalpha, Stig_othR, by = "Items")
View(ResponseStats)
ResponseStats$ResponseT1 <- ResponseStats$r.drop
StigmaStats <- full_join(STIGalpha, Resp_othR, by = "Items")
StigmaStats$StigmaT1 <- StigmaStats$r.drop
View(StigmaStats)
StigmaStats <- (select(StigmaStats, Items, ResponseT1, StigmaT1))
View(StigmaStats)
View(ResponseStats)
ResponseStats <- (select(ResponseStats, Items, ResponseT1, StigmaT1))
ItemAnalyses <- full_join(ResponseStats, StigmaStats, by "Items")
ItemAnalyses <- rbind(ResponseStats, StigmaStats)
View(ItemAnalyses)
#Writing them to a .csv file allows post-r formatting
write.csv(ItemAnalyses, file = "LGBTQ_Climate_ItemAnalyses.csv", sep = ",", row.names=FALSE, col.names=TRUE)
#Writing them to a .csv file allows post-r formatting
write.csv(ItemAnalyses, file = "LGBTQ_Climate_ItemAnalyses.csv", sep = ",", row.names=TRUE, col.names=TRUE)
ItemAnalyses <- round(rbind(ResponseStats, StigmaStats)2)
ItemAnalyses <- round(rbind(ResponseStats, StigmaStats),2)
ItemAnalyses <- round(rbind(ResponseStats, StigmaStats), 2)
install.packages("citr")
devtools::install_github("crsh/citr")
install.packages("devtools")
devtools::install_github("crsh/citr")
install.packages("rtools")
citr:::insert_citation()
set.seed(210921)
GRMSmat <- matrix(c(.69, .69, .60, .59, .55, .55, .54, .50, .41, .41, .04, -.15, .06, .12, .20, -.01, -.22, -.02, .02, .12, -.09, .06, .19, -.03, -.13,
.07, -.07, .00, .07, -.18, .22, .23, -.01, .03, .02, .93, .81, .69, .67, .61, .58, .54, -.04, -.07, -.04, .00, .19, .00, .04, .08,
-.08, -.08, 00, .06, .16, -.06, .08, .16, .22, .23, -.04, .01, -.05, -.11, -.16, .25, .16, .59, .55, .54, .54, .51, -.12, .08, .03,
-.06, .03, .16, .01, .05, .09, -.08, -.06, .07, -.03, -.08, .18, .03, .06, .06, -.21, .21, .21, .03, -.06, .26, -.14, .70, .69, .68), ncol=4) #primary factor loadings for the four factors
rownames(GRMSmat) <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10", "Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(GRMSmat) <- c("Objectified", "Marginalized", "Strong", "Angry")
GRMSCorMat <- GRMSmat %*% t(GRMSmat) #create the correlation matrix
diag(GRMSCorMat) <- 1
#SzyCorMat #prints the correlation matrix
GRMS_M <- c(1.78,	1.85,	1.97,	1.93,	2.01,	1.76,	1.91,	2.22,	1.83,	1.88, 2,	3.5,	2.43,	3.44,	2.39,	2.89,	2.7, 1.28,	2.25,	1.45,	1.57,	1.4, 2.02,	2.53,	2.39) #item means; I made these up based on the M and SDs for the factors
GRMS_SD <- c(1.11,	1.23,	0.97,	0.85,	1.19,	1.32,	1.04,	0.98,	1.01,	1.03, 1.01,	0.97,	1.32,	1.24,	1.31,	1.42,	1.2, 0.85,	0.94,	0.78,	1.11,	0.84, 1.14,	1.2,	1.21) #item standard deviations; I made these up based on the M and SDs for the factors
GRMSCovMat <- GRMS_SD %*% t(GRMS_SD) * GRMSCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
dfGRMS <- as.data.frame(round(MASS::mvrnorm(n=259, mu = GRMS_M, Sigma = GRMSCovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix
dfGRMS[dfGRMS>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfGRMS[dfGRMS<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#colMeans(GRMS) #displays column means
#Below is code if you would like and ID number. For this lesson's purposes and ID number would just need to be removed, so I will not include it in the original simulation.
#library(tidyverse)
#dfGRMS <- dfGRMS %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfGRMS <- dfGRMS%>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(psych)){install.packages("psych")}
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(MASS)){install.packages("MASS")}
#if(!require(sjstats)){install.packages("sjstats")}
#if(!require(apaTables)){install.packages("apaTables")}
#if(!require(qualtRics)){install.packages("qualtRics")}
set.seed(210921)
GRMSmat <- matrix(c(.69, .69, .60, .59, .55, .55, .54, .50, .41, .41, .04, -.15, .06, .12, .20, -.01, -.22, -.02, .02, .12, -.09, .06, .19, -.03, -.13,
.07, -.07, .00, .07, -.18, .22, .23, -.01, .03, .02, .93, .81, .69, .67, .61, .58, .54, -.04, -.07, -.04, .00, .19, .00, .04, .08,
-.08, -.08, 00, .06, .16, -.06, .08, .16, .22, .23, -.04, .01, -.05, -.11, -.16, .25, .16, .59, .55, .54, .54, .51, -.12, .08, .03,
-.06, .03, .16, .01, .05, .09, -.08, -.06, .07, -.03, -.08, .18, .03, .06, .06, -.21, .21, .21, .03, -.06, .26, -.14, .70, .69, .68), ncol=4) #primary factor loadings for the four factors
rownames(GRMSmat) <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10", "Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(GRMSmat) <- c("Objectified", "Marginalized", "Strong", "Angry")
GRMSCorMat <- GRMSmat %*% t(GRMSmat) #create the correlation matrix
diag(GRMSCorMat) <- 1
#SzyCorMat #prints the correlation matrix
GRMS_M <- c(1.78,	1.85,	1.97,	1.93,	2.01,	1.76,	1.91,	2.22,	1.83,	1.88, 2,	3.5,	2.43,	3.44,	2.39,	2.89,	2.7, 1.28,	2.25,	1.45,	1.57,	1.4, 2.02,	2.53,	2.39) #item means; I made these up based on the M and SDs for the factors
GRMS_SD <- c(1.11,	1.23,	0.97,	0.85,	1.19,	1.32,	1.04,	0.98,	1.01,	1.03, 1.01,	0.97,	1.32,	1.24,	1.31,	1.42,	1.2, 0.85,	0.94,	0.78,	1.11,	0.84, 1.14,	1.2,	1.21) #item standard deviations; I made these up based on the M and SDs for the factors
GRMSCovMat <- GRMS_SD %*% t(GRMS_SD) * GRMSCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
dfGRMS <- as.data.frame(round(MASS::mvrnorm(n=259, mu = GRMS_M, Sigma = GRMSCovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix
dfGRMS[dfGRMS>5]<-5 #restricts the upperbound of all variables to be 5 or less
dfGRMS[dfGRMS<0]<-0 #resticts the lowerbound of all variable to be 0 or greater
#colMeans(GRMS) #displays column means
#Below is code if you would like and ID number. For this lesson's purposes and ID number would just need to be removed, so I will not include it in the original simulation.
#library(tidyverse)
#dfGRMS <- dfGRMS %>% dplyr::mutate(ID = row_number()) #add ID to each row
#dfGRMS <- dfGRMS%>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
psych::describe(dfGRMS)
psych::describe(dfGRMS)
View(dfGRMS)
GRMSr <- cor(dfGRMS) #correlation matrix (with the negatively scored item already reversed) created and saved as object
round(GRMSr, 2)
round(GRMSr[,1:8], 2)
round(GRMSr[,9:16], 2)
round(GRMSr[,17:25], 2)
psych::KMO(dfGRMS)
#psych::KMO(GRMSr) #for the KMO function, do not specify sample size if using the matrix form of the data
psych::KMO(GRMSr) #for the KMO function, do not specify sample size if using the matrix form of the data
psych::KMO(dfGRMS)
psych::KMO(GRMSr) #for the KMO function, do not specify sample size if using the matrix form of the data
psych::cortest.bartlett(dfGRMS) #from the raw data
#raw data produces the warning "R was not square, finding R from data." This means nothing other than we fed it raw data and the function is creating a matrix from which to do the analysis.
#psych::cortest.bartlett(GRMSr, n = 259) #if using the matrix, must specify sample size
psych::cortest.bartlett(GRMSr, n = 259) #if using the matrix, must specify sample size
#det(GRMSr)
det(cor(dfGRMS))#if using the raw data
det(GRMSr)
det(GRMSr)
grmsPAF1 <- psych::fa(GRMSr, nfactors=20, fm = "pa", max.iter = 50, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(GRMSr, nfactors=10, fm = "pa", max.iter = 50, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(GRMSr, nfactors=10, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1
grmsPAF1 <- psych::fa(GRMSr, nfactors=12, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(GRMSr, nfactors=112, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(GRMSr, nfactors=11, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(GRMSr, nfactors=10, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(GRMSr, nfactors=9, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1
grmsPAF1 <- psych::fa(dfGRMS, nfactors = 10, fm = "pa", max.iter = 50, rotate = "none")# using raw data and specifying the max number of factors
grmsPAF1
grmsPAF1 <- psych::fa(dfGRMS, nfactors = 10, fm = "pa", max.iter = 50, rotate = "none")# using raw data and specifying the max number of factors
50
grmsPAF1 <- psych::fa(dfGRMS, nfactors = 10, fm = "pa", max.iter = 50, rotate = "none")# using raw data and specifying the max number of factors
grmsPAF1
grmsPAF1 <- psych::fa(dfGRMS, nfactors = 10, fm = "pa", max.iter = 100, rotate = "none")# using raw data and specifying the max number of factors
grmsPAF1
3.51/25
names(grmsPAF1)
names(grmsPAF1)
names(grmsPAF1)
plot(grmsPAF1$values, type = "b") #type = "b" gives us "both" lines and points;  type = "l" gives lines and is relatively worthless
citr:::insert_citation()
grmsPAF2 <- psych::fa(GRMSr, nfactors=4, fm = "pa", rotate="none")
#grmsPAF2 <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "none") #can copy prior script, but change nfactors and object name
grmsPAF2
grmsPAF2
#grmsPAF1 <- psych::fa(GRMSr, nfactors=10, fm = "pa", max.iter = 100, rotate="none")# using the matrix data and specifying the # of factors.
grmsPAF1 <- psych::fa(dfGRMS, nfactors = 10, fm = "pa", max.iter = 100, rotate = "none")# using raw data and specifying the max number of factors
#I received the warning "maximum iteration exceeded". It gave output, but it's best if we don't get that warning, so I increased it to 100.
grmsPAF1 #this object holds a great deal of information
names(PAF1)
names(grmsPAF2)
mean(grmsPAF2$communality)
sum(grmsPAF2$communality) #checking my work by calculating the sum and dividing by 25
9.836131/25
mean(grmsPAF2$communality)
citr:::insert_citation()
round(psych::factor.model(grmsPAF2$loadings), 3)#produces the reproduced correlation matrix
round(psych::factor.residuals(GRMSr, grmsPAF2$loadings), 3)
.41 - .426
round(psych::factor.residuals(GRMSr, grmsPAF2$loadings), 3)
grmsPAF2_resids <- psych::factor.residuals(GRMSr, grmsPAF2$loadings)#first extract the resids
grmsPAF2_resids <- as.matrix(grmsPAF2_resids[upper.tri(grmsPAF2_resids)])#the object has the residuals in a single column
head(grmsPAF2_resids)
large.resid <- abs(grmsPAF2_resids) > 0.05
#large.resid
sum(large.resid)
round(sum(large.resid) / nrow(grmsPAF2_resids),3)
citr:::insert_citation()
round(sqrt(mean(grmsPAF2_resids^2)), 3)
hist(grmsPAF2_resids)
#grmsPAF2ORTH <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH
grmsPAF2ORTH <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "varimax")
#grmsPAF2ORTH <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH
#grmsPAF2ORTH <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "varimax")
grmsPAF2ORTH
grmsPAF2_table <- psych::print.psych(grmsPAF2ORTH, cut = 0.3, sort = TRUE)
citr:::insert_citation()
psych::fa.diagram(grmsPAF2ORTH)
names(grmsPAF2ORTH)
#names(grmsPAF2ORTH)
pcaORTH_table <- round(grmsPAF2ORTH$loadings,3)
write.table(pafORTH_table, file="pafORTH_table.csv", sep=",", col.names=TRUE, row.names=FALSE)
#names(grmsPAF2ORTH)
pafORTH_table <- round(grmsPAF2ORTH$loadings,3)
write.table(pafORTH_table, file="pafORTH_table.csv", sep=",", col.names=TRUE, row.names=FALSE)
pafORTH_table
#grmsPAF2obl <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl
grmsPAF2obl <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "oblimin")
#grmsPAF2obl <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl
#grmsPAF2obl <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "oblimin")
grmsPAF2obl
psych::print.psych(grmsPAF2obl, cut = 0.3, sort=TRUE)
grmsPAF2obl$loadings %*% grmsPAF2obl$Phi
citr:::insert_citation()
#Field's function to produce the structure matrix
factor.structure <- function(fa, cut = 0.2, decimals = 2){
structure.matrix <- psych::fa.sort(fa$loadings %*% fa$Phi)
structure.matrix <- data.frame(ifelse(abs(structure.matrix) < cut, "", round(structure.matrix, decimals)))
return(structure.matrix)
}
factor.structure(grmsPAF2obl, cut = 0.3)
#in all of this, don't forget to be specifiying the datset that has the reverse-coded item replaced
grmsPAF2obl <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "oblimin", scores = TRUE)
head(grmsPAF2obl$scores, 10) #shows us only the first 10 (of N = 2571)
dfGRMS <- cbind(dfGRMS, grmsPAF2obl$scores) #adds them to our raw dataset
#in all of this, don't forget to be specifiying the datset that has the reverse-coded item replaced
grmsPAF2obl <- psych::fa(GRMSr, nfactors = 4, fm = "pa", rotate = "oblimin", scores = TRUE)
head(grmsPAF2obl$scores, 10) #shows us only the first 10 (of N = 2571)
#in all of this, don't forget to be specifiying the datset that has the reverse-coded item replaced
grmsPAF2obl <- psych::fa(dfGRMS, nfactors = 4, fm = "pa", rotate = "oblimin", scores = TRUE)
head(grmsPAF2obl$scores, 10) #shows us only the first 10 (of N = 2571)
dfGRMS <- cbind(dfGRMS, grmsPAF2obl$scores) #adds them to our raw dataset
View(dfGRMS)
psych::fa.diagram (grmsPAF2obl, error = TRUE, side = 3)
psych::corr.test(dfGRMS [c("PA1", "PA2", "PA3", "PA4")])
psych::fa.diagram(grmsPAF2obl)
names(grmsPAF2obl)
#names(grmsPAF2obl)
pafOBL_table <- round(grmsPAF2obl$loadings,3)
#names(grmsPAF2obl)
pafOBL_table <- round(grmsPAF2obl$loadings,3)
write.table(pafOBL_table, file="pafOBL_table.csv", sep=",", col.names=TRUE, row.names=FALSE)
pafOBL_table
psych::fa.diagram(grmsPAF2obl)
GRMS_keys_list <- list(Objective = c("Obj1", "Obj2", "Obj3", "Obj4","Obj5","Obj6","Obj7", "Obj7", "Obj8", "Obj9","Obj10"), Marginalized = c("Marg1", "Marg2","Marg3","Marg4","Marg5","Marg6","Marg7"), Strong = c("Strong1", "Strong2", "Strong3", "Strong4", "Strong5"), Angry = c("Angry1", "Angry2", "Angry3"), GRMStot =c("Obj1", "Obj2", "Obj3", "Obj4","Obj5","Obj6","Obj7", "Obj7", "Obj8", "Obj9","Obj10", "Marg1", "Marg2","Marg3","Marg4","Marg5","Marg6","Marg7","Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3"))
#STEP 2: extract the key (as object) from the list
#a total score key is needed for the omega, and later for the overall alpha
GRMStot.keys <- GRMS_keys_list$GRMStot
#not needed now, but we need to extract a key for each subscale to later calculate the alpha
CmpFrkey <- RAQ_keys_list$FearComputers
#used to extract a key for each subscale to later calculate the alpha
obj_key <- GRMS_keys_list$Objective
marg_key <- GRMS_keys_list$Marginalized
str_key <- GRMS_keys_list$Strong
ang_key<- GRMS_keys_list_keys_list$Angry
#used to extract a key for each subscale to later calculate the alpha
obj_key <- GRMS_keys_list$Objective
marg_key <- GRMS_keys_list$Marginalized
str_key <- GRMS_keys_list$Strong
ang_key<- GRMS_keys_list$Angry
grms_key <- GRMS_keys_list$GRMStot
TOTkey <- selectFromKeys(grms_key)
TOTkey <- psych::selectFromKeys(grms_key)
OBJkey <- psych::selectFromKeys(obj_key)
MARGkey <- psych::selectFromKeys(marg_key)
STRONGkey <- psych::selectFromKeys(str_key)
ANGRYkey <- psych::selectFromKeys(ang_key)
GRMSomega <- omega(dfGRMS[TOTkey], fm = "pa", nfactors = 4)
GRMSomega <- psych::omega(dfGRMS[TOTkey], fm = "pa", nfactors = 4)
GRMSomega
GRMS_omegasem <- psych::omegaSem(dfGRMS[TOTkey], fm = "pa", nfactors = 4)
GRMS_omegasem <- psych::omegaSem(GRMSr, fm = "pa", nfactors = 4)
GRMS_omegasem <- psych::omegaSem(GRMSr, fm = "pa", nfactors = 4)
GRMS_omegasem <- psych::omegaSem(GRMSr, fm = "pa", nfactors = 4, n=259)
GRMS_omegasem <- psych::omegaSem(GRMSr, fm = "pa", nfactors = 4, n=259)
GRMS_omegasem <- psych::omegaSem(GRMSr, fm = "pa", nfactors = 4, n.obs = 259)
GRMS_omegasem <- psych::omegaSem(dfGRMS[TOTkey], fm = "pa", nfactors = 4, n.obs = 259)
GRMS_omegasem <- psych::omegaSem(dfGRMS[TOTkey], fm = "pa", nfactors = 4)
psych::omegaSem(dfGRMS[TOTkey], fm = "pa", nfactors = 4)
psych::omegaSem(GRMSr], fm = "pa", nfactors = 4, n.obs=4)
psych::omegaSem(LGBTQT1, nfactors=2)
psych::omegaSem(GRMSr, nfactors=2)
psych::omegaSem(GRMSr, nfactors=4)
psych::omegaSem(GRMSr, fm = "pa", nfactors=4)
citr:::insert_citation()
psych::omegaSem(GRMSr, nfactors = 4, n.obs=259)
.4/.73
citr:::insert_citation()
GRMScomps <- readRDS("GRMS_Comparisons.rds")
View(GRMScomps)
names(grmsPAF2ORTH)
#names(grmsPAF2ORTH)
pafORTHloadings <- data.frame(unclass(grmsPAF2ORTH$loadings))#I had to add "unclass" to the loadings to render them into a df
View(pafORTHloadings)
pcaORTH_loadings$Items <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10","Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #Item names for joining (and to make sure we know which variable is which)
pafORTH_loadings$Items <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10","Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #Item names for joining (and to make sure we know which variable is which)
loadings to render them into a df
pafORTHloadings$Items <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10","Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #Item names for joining (and to make sure we know which variable is which)
pafORTHloadings <- rename (pafORTHloadings, PAF_OR_Mag = PA1, PAF_OR_Obj = PA2, PAF_OR_Ang = PA3, PAF_OR_Str = PA4)
pafORTHloadings <- tidyverse::rename (pafORTHloadings, PAF_OR_Mag = PA1, PAF_OR_Obj = PA2, PAF_OR_Ang = PA3, PAF_OR_Str = PA4)
pafORTHloadings <- dplyr::rename (pafORTHloadings, PAF_OR_Mag = PA1, PAF_OR_Obj = PA2, PAF_OR_Ang = PA3, PAF_OR_Str = PA4)
GRMScomps <- full_join(GRMScomps, pafORTHloadings, by = "Items")#I had to add "unclass" to the loadings to render them into a df
GRMScomps <- dplyr::full_join(GRMScomps, pafORTHloadings, by = "Items")#I had to add "unclass" to the loadings to render them into a df
GRMScomps <- readRDS("GRMS_Comparisons.rds")
grmsPAF2ORTH
#names(grmsPAF2ORTH)
pafORTH_loadings <- data.frame(unclass(grmsPAF2ORTH$loadings))#I had to add "unclass" to the loadings to render them into a df
pafORTH_loadings$Items <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10","Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #Item names for joining (and to make sure we know which variable is which)
pafORTH_loadings <- dplyr::rename (pafORTH_loadings, PAF_OR_Mag = PA1, PAF_OR_Obj = PA2, PAF_OR_Ang = PA3, PAF_OR_Str = PA4)
GRMScomps <- dplyr::full_join(GRMScomps, pafORTH_loadings, by = "Items")#I had to add "unclass" to the loadings to render them into a df
View(pafORTHloadings)
#Now adding the PAF oblique loadings
pafOBLQ_loadings <- data.frame(unclass(grmsPAF2obl$loadings))#I had to add "unclass" to the loadings to render them into a df
#Now adding the PAF oblique loadings
pafOBLQ_loadings <- data.frame(unclass(grmsPAF2obl$loadings))#I had to add "unclass" to the loadings to render them into a df
View(pafOBLQ_loadings)
pafOBLQ_loadings$Items <- c("Obj1", "Obj2", "Obj3", "Obj4", "Obj5", "Obj6", "Obj7", "Obj8", "Obj9", "Obj10","Marg1", "Marg2", "Marg3", "Marg4", "Marg5", "Marg6", "Marg7", "Strong1", "Strong2", "Strong3", "Strong4", "Strong5", "Angry1", "Angry2", "Angry3") #Item names for joining (and to make sure we know which variable is which)
pafOBLQ_loadings <- dplyr::rename (pafOBLQ_loadings, PAF_OB_Mar = PA1, PAF_OB_Obj = PA2, PAF_OB_Ang = PA3, PAF_OB_Str = PA4)
GRMScomps <- dplyr::full_join(GRMScomps, pafOBLQ_loadings, by = "Items")#I had to add "unclass" to the loadings to render them into a df
write.csv(GRMScomps, file = "GRMS_Comps.csv", sep = ",", row.names=FALSE, col.names=TRUE)#Writes the table to a .csv file where you can open it with Excel and format )
Resp_othR <- psych::corr.test(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
Resp_othR <- psych::corr.test(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(MASS)){install.packages("MASS")}
#if(!require(psych)){install.packages("psych")}
#if(!require(apaTables)){install.packages("apaTables")}
#if(!require(sjstats)){install.packages("sjstats")}
#if(!require(qualtRics)){install.packages("qualtRics")}
set.seed(210827)
SzyT1 <- matrix(c(.88, .73, .73, -.07,-.02, .16, -.03, .10, -.04, .86, .76, .71), ncol=2) #primary factor loadings for the two factors
rownames(SzyT1) <- c("cold", "unresponsive", "supportiveNR", "negative", "heterosexism", "harassed") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(SzyT1) <- c("F1", "F2")
SzyCorMat <- SzyT1 %*% t(SzyT1) #create the correlation matrix
diag(SzyCorMat) <- 1
#SzyCorMat #prints the correlation matrix
SzyM <- c(2.31, 3.11, 2.40, 3.18, 4.44, 3.02) #item means
SzySD <- c(1.35, 1.46, 1.26, 1.60, 1.75, 1.50) #item standard deviations; turns out we won't need these since we have a covariance matrix
SzyCovMat <- SzySD %*% t(SzySD) * SzyCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
dfSzyT1 <- as.data.frame(round(MASS::mvrnorm(n=646, mu = SzyM, Sigma = SzyCovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix
dfSzyT1[dfSzyT1>7]<-7 #restricts the upperbound of all variables to be 7 or less
dfSzyT1[dfSzyT1<1]<-1 #resticts the lowerbound of all variable to be 1 or greater
#colMeans(dfSzy) #displays column means
library(tidyverse)
dfSzyT1 <- dfSzyT1 %>% dplyr::mutate(ID = row_number()) #add ID to each row
dfSzyT1 <- dfSzyT1%>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
dfSzyT1<- dfSzyT1 %>%
dplyr::mutate(supportive = 8 - supportiveNR) #because the original scale had 1 reversed item, I reversed it so that we can re-reverse it for practice; reversing means subracting from 1 greater than the scaling of the scale (in our case 1 to 7, so we subtract from 8)
dfSzyT1 <- dfSzyT1%>%
dplyr::select(-supportiveNR)
#write the simulated data  as a .csv
#write.table(dfSzyT1, file="dfSzyT1.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#dfSzyT1 <- read.csv ("dfSzyT1.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(dfSzyT1, "dfSzyT1.rds")
#bring back the simulated dat from an .rds file
#dfSzyT1 <- readRDS("dfSzyT1.rds")
psych::describe(dfSzyT1)
dfSzyT1<- dfSzyT1 %>%
dplyr::mutate(unsupportive = 8 - supportive) #scaling 1 to 7; so we subtract from 8
psych::describe(dfSzyT1)
LGBTQvars <- c('cold', 'unresponsive', 'negative', 'heterosexism', 'harassed', 'unsupportive')
ResponseVars <- c('cold', 'unresponsive', 'unsupportive')
Stigmavars <- c('negative', 'heterosexism', 'harassed')
dfSzyT1$TotalT1 <- sjstats::mean_n(dfSzyT1[,LGBTQvars], .80)#will create the mean for each individual if 80% of variables are present (this means there must be at least 5 of 6)
dfSzyT1$ResponseT1 <- sjstats::mean_n(dfSzyT1[,ResponseVars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
dfSzyT1$StigmaT1 <- sjstats::mean_n(dfSzyT1[,Stigmavars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
LGBTQT1 <- dplyr::select(dfSzyT1, cold, unresponsive, unsupportive, negative, heterosexism, harassed)
ResponseT1 <- dplyr::select(dfSzyT1, cold, unresponsive, unsupportive)
StigmaT1 <- dplyr::select(dfSzyT1, negative, heterosexism, harassed)
LGBTQalpha <- psych::alpha(LGBTQT1)#Although unnecessary, I have saved the output as objects because I will use the objects to create a table
LGBTQalpha
minus_unresponsive <- dplyr::select(dfSzyT1, cold,  unsupportive, negative, heterosexism, harassed)
psych::alpha(minus_unresponsive)
RESPalpha <- psych::alpha(ResponseT1)
RESPalpha
STIGalpha <- psych::alpha(StigmaT1)
STIGalpha
apaTables::apa.cor.table(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])
apaTables::apa.cor.table(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])
#write the simulated data  as a .csv
#write.table(climate_df, file="climate_df.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#climate_df <- read.csv ("climate_df.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(climate_df, "climate_df.rds")
#bring back the simulated dat from an .rds file
#climate_df <- readRDS("climate_df.rds")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(MASS)){install.packages("MASS")}
#if(!require(psych)){install.packages("psych")}
#if(!require(apaTables)){install.packages("apaTables")}
#if(!require(sjstats)){install.packages("sjstats")}
#if(!require(qualtRics)){install.packages("qualtRics")}
set.seed(210827)
SzyT1 <- matrix(c(.88, .73, .73, -.07,-.02, .16, -.03, .10, -.04, .86, .76, .71), ncol=2) #primary factor loadings for the two factors
rownames(SzyT1) <- c("cold", "unresponsive", "supportiveNR", "negative", "heterosexism", "harassed") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(SzyT1) <- c("F1", "F2")
SzyCorMat <- SzyT1 %*% t(SzyT1) #create the correlation matrix
diag(SzyCorMat) <- 1
#SzyCorMat #prints the correlation matrix
SzyM <- c(2.31, 3.11, 2.40, 3.18, 4.44, 3.02) #item means
SzySD <- c(1.35, 1.46, 1.26, 1.60, 1.75, 1.50) #item standard deviations; turns out we won't need these since we have a covariance matrix
SzyCovMat <- SzySD %*% t(SzySD) * SzyCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
dfSzyT1 <- as.data.frame(round(MASS::mvrnorm(n=646, mu = SzyM, Sigma = SzyCovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix
dfSzyT1[dfSzyT1>7]<-7 #restricts the upperbound of all variables to be 7 or less
dfSzyT1[dfSzyT1<1]<-1 #resticts the lowerbound of all variable to be 1 or greater
#colMeans(dfSzy) #displays column means
library(tidyverse)
dfSzyT1 <- dfSzyT1 %>% dplyr::mutate(ID = row_number()) #add ID to each row
dfSzyT1 <- dfSzyT1%>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
dfSzyT1<- dfSzyT1 %>%
dplyr::mutate(supportive = 8 - supportiveNR) #because the original scale had 1 reversed item, I reversed it so that we can re-reverse it for practice; reversing means subracting from 1 greater than the scaling of the scale (in our case 1 to 7, so we subtract from 8)
dfSzyT1 <- dfSzyT1%>%
dplyr::select(-supportiveNR)
#write the simulated data  as a .csv
#write.table(dfSzyT1, file="dfSzyT1.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#dfSzyT1 <- read.csv ("dfSzyT1.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(dfSzyT1, "dfSzyT1.rds")
#bring back the simulated dat from an .rds file
#dfSzyT1 <- readRDS("dfSzyT1.rds")
psych::describe(dfSzyT1)
dfSzyT1<- dfSzyT1 %>%
dplyr::mutate(unsupportive = 8 - supportive) #scaling 1 to 7; so we subtract from 8
psych::describe(dfSzyT1)
LGBTQvars <- c('cold', 'unresponsive', 'negative', 'heterosexism', 'harassed', 'unsupportive')
ResponseVars <- c('cold', 'unresponsive', 'unsupportive')
Stigmavars <- c('negative', 'heterosexism', 'harassed')
dfSzyT1$TotalT1 <- sjstats::mean_n(dfSzyT1[,LGBTQvars], .80)#will create the mean for each individual if 80% of variables are present (this means there must be at least 5 of 6)
dfSzyT1$ResponseT1 <- sjstats::mean_n(dfSzyT1[,ResponseVars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
dfSzyT1$StigmaT1 <- sjstats::mean_n(dfSzyT1[,Stigmavars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
LGBTQT1 <- dplyr::select(dfSzyT1, cold, unresponsive, unsupportive, negative, heterosexism, harassed)
ResponseT1 <- dplyr::select(dfSzyT1, cold, unresponsive, unsupportive)
StigmaT1 <- dplyr::select(dfSzyT1, negative, heterosexism, harassed)
LGBTQalpha <- psych::alpha(LGBTQT1)#Although unnecessary, I have saved the output as objects because I will use the objects to create a table
LGBTQalpha
minus_unresponsive <- dplyr::select(dfSzyT1, cold,  unsupportive, negative, heterosexism, harassed)
psych::alpha(minus_unresponsive)
RESPalpha <- psych::alpha(ResponseT1)
RESPalpha
STIGalpha <- psych::alpha(StigmaT1)
STIGalpha
apaTables::apa.cor.table(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])
apaTables::apa.cor.table(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])
#write the simulated data  as a .csv
#write.table(climate_df, file="climate_df.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#climate_df <- read.csv ("climate_df.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(climate_df, "climate_df.rds")
#bring back the simulated dat from an .rds file
#climate_df <- readRDS("climate_df.rds")
Resp_othR <- psych::corr.test(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
Resp_othR <- as.data.frame(Resp_othR$r)#extracts the "r" matrix and makes it a df
Resp_othR$Items <- c("negative", "heterosexism", "harassed", "ResponseT1")#Assigning names to the items
Resp_othR <- Resp_othR[!Resp_othR$Items == "ResponseT1",]#Removing the subscale score as a a row in the df
Resp_othR[, 'StigmaT1'] <- NA #We need a column for this to bind the items later
Resp_othR <- (select(Resp_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
RESPalpha <- as.data.frame(RESPalpha$item.stats)#Grabbing the alpha objet we created earlier and making it a df
RESPalpha$Items <- c("cold", "unresponsive", "unsupportive")
Stig_othR <- psych::corr.test(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])#Run the correlation of the subscale and the items that are *not* on the subscale
Stig_othR <- as.data.frame(Stig_othR$r)#extracts the "r" matrix and makes it a df
Stig_othR$Items <- c("cold", "unresponsive", "unsupportive", "StigmaT1")#Assigning names to the items
Stig_othR <- Stig_othR[!Stig_othR$Items == "StigmaT1",]#Removing the subscale score as a a row in the df
Stig_othR[, 'ResponseT1'] <- NA #We need a column for this to bind the items later
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
Stig_othR <- (select(Stig_othR, Items, ResponseT1, StigmaT1)) #All we need is the item name and the correlations with the subscales
STIGalpha <- as.data.frame(STIGalpha$item.stats)#Grabbing the alpha objet we created earlier and making it a df
STIGalpha$Items <- c("negative", "heterosexism", "harassed")
#Combining these four dfs
ResponseStats <- full_join(RESPalpha, Stig_othR, by = "Items")
ResponseStats$ResponseT1 <- ResponseStats$r.drop
ResponseStats <- (select(ResponseStats, Items, ResponseT1, StigmaT1))
StigmaStats <- full_join(STIGalpha, Resp_othR, by = "Items")
StigmaStats$StigmaT1 <- StigmaStats$r.drop
StigmaStats <- (select(StigmaStats, Items, ResponseT1, StigmaT1))
ItemAnalyses <- rbind(ResponseStats, StigmaStats)
ItemAnalyses
#Writing them to a .csv file allows post-r formatting
write.csv(ItemAnalyses, file = "LGBTQ_Climate_ItemAnalyses.csv", sep = ",", row.names=TRUE, col.names=TRUE)
Resp_othR <- dplyr::select(Resp_othR, Items, ResponseT1, StigmaT1) #All we need is the item name and the correlations with the subscales
