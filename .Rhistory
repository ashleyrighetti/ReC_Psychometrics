psych::describe(dfSzyT1)
library(tidyverse)
dfSzyT1 <- as.data.frame(dfSzyT1) #converts to a df so we can use in R
dfSzyT1<- dfSzyT1 %>%
mutate(unsupportive = 7 - supportive)
psych::describe(dfSzyT1)
LGBTQvars <- c('cold', 'unresponsive', 'negative', 'heterosexism', 'harassed', 'unsupportive')
ResponseVars <- c('cold', 'unresponsive', 'unsupportive')
Stigmavars <- c('negative', 'heterosexism', 'harassed')
dfSzyT1$TotalT1 <- sjstats::mean_n(dfSzyT1[,LGBTQvars], .80)#will create the mean for each individual if 80% of variables are present (this means there must be at least 5 of 6)
dfSzyT1$ResponseT1 <- sjstats::mean_n(dfSzyT1[,ResponseVars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
dfSzyT1$StigmaT1 <- sjstats::mean_n(dfSzyT1[,Stigmavars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
LGBTQT1 <- select(dfSzyT1, cold, unresponsive, unsupportive, negative, heterosexism, harassed)
ResponseT1 <- select(dfSzyT1, cold, unresponsive, unsupportive)
StigmaT1 <- select(dfSzyT1, negative, heterosexism, harassed)
psych::alpha(LGBTQT1)
minus_unresponsive <- select(dfSzyT1, cold,  unsupportive, negative, heterosexism, harassed)
psych::alpha(minus_unresponsive)
psych::alpha(ResponseT1)
psych::alpha(StigmaT1)
apaTables::apa.cor.table(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])
apaTables::apa.cor.table(dfSzyT1[c("negative", "heterosexism", "harassed", "ResponseT1")])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
set.seed(210827)
SzyT1 <- matrix(c(.88, .73, .73, -.07,-.02, .16, -.03, .10, -.04, .86, .76, .71), ncol=2) #primary factor loadings for the two factors
rownames(SzyT1) <- c("cold", "unresponsive", "supportiveNR", "negative", "heterosexism", "harassed") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(SzyT1) <- c("F1", "F2")
SzyCorMat <- SzyT1 %*% t(SzyT1) #create the correlation matrix
diag(SzyCorMat) <- 1
#SzyCorMat #prints the correlation matrix
SzyM <- c(2.31, 3.11, 2.40, 3.18, 4.44, 3.02) #item means
SzySD <- c(1.35, 1.46, 1.26, 1.60, 1.75, 1.50) #item standard deviations; turns out we won't need these since we have a covariance matrix
SzyCovMat <- SzySD %*% t(SzySD) * SzyCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
library(MASS)
dfSzyT1 <- round(mvrnorm(n=646, mu = SzyM, Sigma = SzyCovMat, empirical = TRUE),0) #creates the item level data from the sample size, mean, and covariance matrix
dfSzyT1[dfSzyT1>7]<-7 #restricts the upperbound of all variables to be 7 or less
dfSzyT1[dfSzyT1<1]<-1 #resticts the lowerbound of all variable to be 1 or greater
#colMeans(dfSzy) #displays column means
library(tidyverse)
dfSzyT1 <- as.data.frame(dfSzyT1) #converts to a df so we can use in R
library(dplyr)
dfSzyT1 <- dfSzyT1 %>% mutate(ID = row_number()) #add ID to each row
dfSzyT1 <- dfSzyT1%>%select(ID, everything())#moving the ID number to the first column; requires
dfSzyT1<- dfSzyT1 %>%
mutate(supportive = 7 - supportiveNR) #because the original scale had 1 reversed item, I reversed it so that we can re-reverse it for practice
dfSzyT1 <- dfSzyT1%>%
select(-supportiveNR)
psych::describe(dfSzyT1)
library(tidyverse)
dfSzyT1 <- as.data.frame(dfSzyT1) #converts to a df so we can use in R
dfSzyT1<- dfSzyT1 %>%
mutate(unsupportive = 7 - supportive)
psych::describe(dfSzyT1)
LGBTQT1 <- select(dfSzyT1, cold, unresponsive, unsupportive, negative, heterosexism, harassed)
ResponseT1 <- select(dfSzyT1, cold, unresponsive, unsupportive)
StigmaT1 <- select(dfSzyT1, negative, heterosexism, harassed)
split <- psych::splitHalf (LGBTQT1, raw = TRUE, brute = TRUE)
split #show the results of the analysis
hist(split$raw,breaks = 101, xlab = "Split half reliability",
main = "Split half reliabilities of 6 LGBTQ items")
splitRx <- psych::splitHalf (ResponseT1, raw = TRUE, brute = TRUE)
splitRx #show the results of the analysis
hist(splitRx$raw,breaks = 101, xlab = "Split half reliability",
main = "Split half reliabilities of 3 items of the College Response subscale")
splitSt <- psych::splitHalf (StigmaT1, raw = TRUE, brute = TRUE)
splitSt #show the results of the analysis
hist(splitRx$raw,breaks = 101, xlab = "Split half reliability",
main = "Split half reliabilities of 3 items of the Stigma subscale")
psych::alpha (LGBTQT1)
psych::alpha(ResponseT1)
psych::alpha(StigmaT1)
psych::omegaSem(LGBTQT1, nfactors=2)
.37/.73
set.seed(210829)
SzyT2 <- matrix(c(.85, .71, .75, -.06,-.03, .18, -.04, .13, -.05, .87, .75, .70), ncol=2) #primary factor loadings for the two factors
rownames(SzyT2) <- c("cold", "unresponsive", "supportiveNR", "negative", "heterosexism", "harassed") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(SzyT2) <- c("F1", "F2")
SzyCorMat <- SzyT2 %*% t(SzyT2) #create the correlation matrix
diag(SzyCorMat) <- 1
#SzyCorMat #prints the correlation matrix
SzyM <- c(2.30, 3.12, 2.39, 3.24, 4.21, 3.47) #item means
SzySD <- c(1.35, 1.46, 1.26, 1.60, 1.75, 1.50) #item standard deviations; turns out we won't need these since we have a covariance matrix
SzyCovMat <- SzySD %*% t(SzySD) * SzyCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
library(MASS)
dfSzyT2 <- round(mvrnorm(n=646, mu = SzyM, Sigma = SzyCovMat, empirical = TRUE),0) #creates the item level data from the sample size, mean, and covariance matrix
dfSzyT2[dfSzyT2>7]<-7 #restricts the upperbound of all variables to be 7 or less
dfSzyT2[dfSzyT2<1]<-1 #resticts the lowerbound of all variable to be 1 or greater
#colMeans(dfSzy) #displays column means
library(tidyverse)
dfSzyT2 <- as.data.frame(dfSzyT2) #converts to a df so we can use in R
library(dplyr)
dfSzyT2 <- dfSzyT2 %>% mutate(ID = row_number()) #add ID to each row
dfSzyT2 <- dfSzyT2%>%select(ID, everything())#moving the ID number to the first column; requires
dfSzyT2<- dfSzyT2 %>%
mutate(supportive = 7 - supportiveNR) #because the original scale had 1 reversed item, I reversed it so that we can re-reverse it for practice
dfSzyT2 <- dfSzyT2%>%
select(-supportiveNR)
dfSzyT2<- dfSzyT2 %>%
mutate(unsupportive = 7 - supportive)
LGBTQvars <- c('cold', 'unresponsive', 'negative', 'heterosexism', 'harassed', 'unsupportive')
ResponseVars <- c('cold', 'unresponsive', 'unsupportive')
Stigmavars <- c('negative', 'heterosexism', 'harassed')
dfSzyT1$TotalT1 <- sjstats::mean_n(dfSzyT1[,LGBTQvars], .80)#will create the mean for each individual if 80% of variables are present (this means there must be at least 5 of 6)
dfSzyT1$ResponseT1 <- sjstats::mean_n(dfSzyT1[,ResponseVars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
dfSzyT1$StigmaT1 <- sjstats::mean_n(dfSzyT1[,Stigmavars], .80)#will create the mean for each individual if 80% of variables are present (in this case all variables must be present)
SimCor_mu <- c(3.13, 2.68, 3.58, 3.16, 2.66, 2.76)
SimCor_sd <- c(0.82, 1.04, 1.26, 0.83, 1.05, .99)
simCor <- matrix (c(1,	0.64,	0.77,	0.44,	0.33,	0.29,
0.64,	1,	0.53,	0.35,	0.46,	0.34,
0.77,	0.53,	1,	0.27,	0.4,	0.47,
0.44,	0.35,	0.27,	1,	0.63,	0.62,
0.33,	0.46,	0.4,	0.63,	1,	0.57,
0.29,	0.34,	0.47,	0.62,	0.57,	1),
ncol = 6)
scovMat <- SimCor_sd %*% t(SimCor_sd)*simCor
set.seed(210829)
retest_df <- MASS::mvrnorm(n = 646, mu = SimCor_mu, Sigma = scovMat, empirical = TRUE)
colnames(retest_df) <- c("TotalT1", "ResponseT1", "StigmaT1", "TotalT2", "ResponseT2", "StigmaT2")
retest_df  <- as.data.frame(retest_df) #converts to a df so we can use in R
library(dplyr)
retest_df <- retest_df %>% mutate(ID = row_number()) #add ID to each row
retest_df <- retest_df %>%select(ID, everything())#moving the ID number to the first column; requires
retest_df2 <- retest_df %>%
select (c(-ID))
apaTables::apa.cor.table(data = retest_df2, landscape=TRUE, table.number = 1, filename="Table_1_Retest.doc")
apaTables::apa.cor.table(dfSzyT1[c("cold", "unresponsive", "unsupportive", "StigmaT1")])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
library(qualtRics)
QTRX_csv <- read_survey("ReC_Download210319.csv", strip_html = TRUE, import_id = FALSE, time_zone=NULL, legacy = FALSE)
#only have to run this ONCE to draw from the same Qualtrics account...but will need to get different token if you are changing between accounts
library(qualtRics)
qualtrics_api_credentials(api_key = "mUgPMySYkiWpMFkwHale1QE5HNmh5LRUaA8d9PDg",
base_url = "spupsych.az1.qualtrics.com", overwrite = TRUE, install = TRUE)
surveys <- all_surveys()
#obtained with the survey ID
#"surveyID" should be the ID from above
#"verbose" prints messages to the R console
#"label", when TRUE, imports data as text responses; if FALSE prints the data as numerical responses
#"convert", when TRUE, attempts to convert certain question types to the "proper" data type in R; because I don't like guessing, I want to set up my own factors.
#"force_request", when TRUE, always downloads the survey from the API instead of from a temporary directory (i.e., it always goes to the primary source)
# "import_id", when TRUE includes the unique Qualtrics-assigned ID; since I have provided labels, I want false
#Out of the blue, I started getting an error, that R couldn't find function "fetch_survey."  After trying a million things, adding qualtRics:: to the front of it solved the problem
QTRX_df <-qualtRics::fetch_survey(surveyID = "SV_b2cClqAlLGQ6nLU", time_zone = NULL, verbose = FALSE, label=FALSE, convert=FALSE, force_request = TRUE, import_id = FALSE)
#obtained with the survey ID
#"surveyID" should be the ID from above
#"verbose" prints messages to the R console
#"label", when TRUE, imports data as text responses; if FALSE prints the data as numerical responses
#"convert", when TRUE, attempts to convert certain question types to the "proper" data type in R; because I don't like guessing, I want to set up my own factors.
#"force_request", when TRUE, always downloads the survey from the API instead of from a temporary directory (i.e., it always goes to the primary source)
# "import_id", when TRUE includes the unique Qualtrics-assigned ID; since I have provided labels, I want false
#Out of the blue, I started getting an error, that R couldn't find function "fetch_survey."  After trying a million things, adding qualtRics:: to the front of it solved the problem
QTRX_df <-qualtRics::fetch_survey(surveyID = "SV_b2cClqAlLGQ6nLU", time_zone = NULL, verbose = FALSE, label=FALSE, convert=FALSE, force_request = TRUE, import_id = FALSE)
#only have to run this ONCE to draw from the same Qualtrics account...but will need to get different token if you are changing between accounts
#library(qualtRics)
qualtrics_api_credentials(api_key = "mUgPMySYkiWpMFkwHale1QE5HNmh5LRUaA8d9PDg",
base_url = "spupsych.az1.qualtrics.com", overwrite = TRUE, install = TRUE)
#only have to run this ONCE to draw from the same Qualtrics account...but will need to get different token if you are changing between accounts
#library(qualtRics)
qualtRics::qualtrics_api_credentials(api_key = "mUgPMySYkiWpMFkwHale1QE5HNmh5LRUaA8d9PDg",
base_url = "spupsych.az1.qualtrics.com", overwrite = TRUE, install = TRUE)
#obtained with the survey ID
#"surveyID" should be the ID from above
#"verbose" prints messages to the R console
#"label", when TRUE, imports data as text responses; if FALSE prints the data as numerical responses
#"convert", when TRUE, attempts to convert certain question types to the "proper" data type in R; because I don't like guessing, I want to set up my own factors.
#"force_request", when TRUE, always downloads the survey from the API instead of from a temporary directory (i.e., it always goes to the primary source)
# "import_id", when TRUE includes the unique Qualtrics-assigned ID; since I have provided labels, I want false
#Out of the blue, I started getting an error, that R couldn't find function "fetch_survey."  After trying a million things, adding qualtRics:: to the front of it solved the problem
QTRX_df <-qualtRics::fetch_survey(surveyID = "SV_b2cClqAlLGQ6nLU", time_zone = NULL, verbose = FALSE, label=FALSE, convert=FALSE, force_request = TRUE, import_id = FALSE)
surveys <- all_surveys()
qualtRics::surveys <- all_surveys()
qualtRics::surveys <- all_surveys()
#only have to run this ONCE to draw from the same Qualtrics account...but will need to get different token if you are changing between accounts
library(qualtRics)
surveys <- all_surveys()
#obtained with the survey ID
#"surveyID" should be the ID from above
#"verbose" prints messages to the R console
#"label", when TRUE, imports data as text responses; if FALSE prints the data as numerical responses
#"convert", when TRUE, attempts to convert certain question types to the "proper" data type in R; because I don't like guessing, I want to set up my own factors.
#"force_request", when TRUE, always downloads the survey from the API instead of from a temporary directory (i.e., it always goes to the primary source)
# "import_id", when TRUE includes the unique Qualtrics-assigned ID; since I have provided labels, I want false
#Out of the blue, I started getting an error, that R couldn't find function "fetch_survey."  After trying a million things, adding qualtRics:: to the front of it solved the problem
QTRX_df <-qualtRics::fetch_survey(surveyID = "SV_b2cClqAlLGQ6nLU", time_zone = NULL, verbose = FALSE, label=FALSE, convert=FALSE, force_request = TRUE, import_id = FALSE)
#useLocalTime = TRUE,
citr:::insert_citation()
citr:::insert_citation()
#only have to run this ONCE to draw from the same Qualtrics account...but will need to get different token if you are changing between accounts
library(qualtRics)
surveys <- all_surveys()
#View this as an object (found in the right: Environment).
#Get survey id # for the next command
#If this is showing you the WRONG list of surveys, you are pulling from the wrong Qualtrics account (i.e., maybe this one instead of your own). Go back and change your API token (it saves your old one). Changing the API likely requires a restart of R.
surveys
#obtained with the survey ID
#"surveyID" should be the ID from above
#"verbose" prints messages to the R console
#"label", when TRUE, imports data as text responses; if FALSE prints the data as numerical responses
#"convert", when TRUE, attempts to convert certain question types to the "proper" data type in R; because I don't like guessing, I want to set up my own factors.
#"force_request", when TRUE, always downloads the survey from the API instead of from a temporary directory (i.e., it always goes to the primary source)
# "import_id", when TRUE includes the unique Qualtrics-assigned ID; since I have provided labels, I want false
#Out of the blue, I started getting an error, that R couldn't find function "fetch_survey."  After trying a million things, adding qualtRics:: to the front of it solved the problem
QTRX_df <-qualtRics::fetch_survey(surveyID = "SV_b2cClqAlLGQ6nLU", time_zone = NULL, verbose = FALSE, label=FALSE, convert=FALSE, force_request = TRUE, import_id = FALSE)
#useLocalTime = TRUE,
View(QTRX_df)
#library(qualtRics)
QTRX_csv <- read_survey("ReC_Download210319.csv", strip_html = TRUE, import_id = FALSE, time_zone=NULL, legacy = FALSE)
View(QTRX_csv)
citr:::insert_citation()
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1))
cov_mat <- sd%*%t(sd)*r_mat
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1))
cov_mat <- sd %*% t(sd) * r_mat
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
cov_mat <- sd %*% t(sd) * r_mat
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
cov_mat <- sd %*% t(sd) * r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, empirical=TRUE)
View(cov_mat)
View(r_mat)
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
cov_mat <- sd %*% t(sd) * r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, empirical=FALSE)
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
cov_mat <- sd %*% t(sd) * r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, empirical=FALSE)
mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
cov_mat <- sd %*% t(sd) * r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, tol=1e-6, empirical=FALSE)
is.positive.definite(cov_mat)
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, tol=1e-6, empirical=TRUE)
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, tol=1e-5, empirical=TRUE)
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, tol=1e-4, empirical=TRUE)
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=mu, Sigma=cov_mat, tol=1e-3, empirical=TRUE)
colMeans(SzyDF)
cor(SzyDF)
Szy_mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
Szy_sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
Szy_r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
Szy_cov_mat <- Szy_sd %*% t(Szy_sd) * Szy_r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE) #adding "tol=1e-3" fixed the not positive matrix erro
colMeans(SzyDF)
cor(SzyDF)
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE) #adding "tol=1e-3" fixed the not positive matrix erro
colMeans(SzyDF)
round(cor(SzyDF))
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE) #adding "tol=1e-3" fixed the not positive matrix erro
colMeans(SzyDF)
round(cor(SzyDF), 3)
head(SzyDF)
as.data.frame(SzyDF)
SzyDF <- as.data.frame(SzyDF)
View(SzyDF)
SzyDF <- as.data.frame(SzyDF)
SzyDF <- tidyverse::rename(df_raw, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8)
SzyDF <- as.data.frame(SzyDF)
SzyDF <- dplyr::rename(df_raw, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8)
SzyDF <- as.data.frame(SzyDF)
SzyDF <- dplyr::rename(SzyDF, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8)
View(SzyDF)
round(SzyDF, 0)
round(SzyDF, 2)
View(SzyDF)
SzyDF <- as.data.frame(SzyDF)
SzyDF <- dplyr::rename(SzyDF, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(MASS)){install.packages("MASS")}
#if(!require(psych)){install.packages("psych")}
Szy_mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
Szy_sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
Szy_r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
Szy_cov_mat <- Szy_sd %*% t(Szy_sd) * Szy_r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE) #adding "tol=1e-3" fixed the not positive matrix erro
colMeans(SzyDF)
round(cor(SzyDF), 3)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#will install the package if not already installed
#if(!require(tidyverse)){install.packages("tidyverse")}
#if(!require(MASS)){install.packages("MASS")}
#if(!require(psych)){install.packages("psych")}
Szy_mu <- c(3.16, 2.71, 3.61, .11, 5.61, 4.41, 1.45, 1.29)
Szy_sd <- c(1.26, 1.33, 1.51, .23, 1.15, .53, .80, .78)
Szy_r_mat <- matrix(c(1,   .88, .90, .35, -.56, -.27, .25, .24,
.88,  1,  .58, .25, -.59, -.29, .17, .18,
.90, .58,  1,  .37, -.41, -.19, .27, .24,
.35, .25, .37,  1,  -.22, -.04, .23, .21,
-.56,-.59, -.41, -.22, 1,   .53, -.29, -.32,
-.27, -.29, -.19, -.04, .53, 1, -.22, -.26,
.25, .17,  .27,  .23,  -.29, -.22, 1, .76,
.24,  .18, .24, .21, -.32,  -.26, .76,  1), ncol = 8)
Szy_cov_mat <- Szy_sd %*% t(Szy_sd) * Szy_r_mat
set.seed(210907)
library(MASS)
SzyDF <- mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE) #adding "tol=1e-3" fixed the not positive matrix erro
colMeans(SzyDF)
round(cor(SzyDF), 3)
SzyDF <- as.data.frame(SzyDF)
SzyDF <- dplyr::rename(SzyDF, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8)
SzyDF <- round(SzyDF, 2)
View(SzyDF)
corr(SzyDF)
cor(SzyDF)
set.seed(210907)
library(MASS)
SzyDF <- as.data.frame(mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE)) #adding "tol=1e-3" fixed the not positive matrix erro
View(SzyDF)
SzyDF <- round(dplyr::rename(SzyDF, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8),2)
View(SzyDF)
SzyDF <- round(as.data.frame(mvrnorm(n = 646, mu=Szy_mu, Sigma=Szy_cov_mat, tol=1e-3, empirical=TRUE)),2) #adding "tol=1e-3" fixed the not positive matrix error
SzyDF <- round(dplyr::rename(SzyDF, CClimate = V1, CResponse = V2, Stigma = V3, Victimization = V4, CollSat = V5, Persistence = V6, Anxiety = V7, Depression = V8),2)
View(SzyDF)
cor(SzyDF)
cor(SzyDF, 2)
round(cor(SzyDF),2)
citr:::insert_citation()
apaTables::apa.cor.table(SzyDF, filename = "SzyDor.doc", table.number = 1, show.sig.stars=TRUE, landscape=TRUE)
apaTables::apa.cor.table(SzyDF, filename = "SzyCor.doc", table.number = 1, show.sig.stars=TRUE, landscape=TRUE)
?lm
Sat_Climate <- lm(Persistence ~ Victimization + CClimate, data = SzyDF)
Sat_Climate <- lm(Persistence ~ Victimization + CClimate, data = SzyDF)
summary(Sat_Climate)
PfV <- lm(Persistence ~ Victimization, data = SzyDF)
PfVC <- lm(Persistence ~ Victimization + CClimate, data = SzyDF)
anova(PfV, PfVC)
PfV <- lm(Persistence ~ Victimization, data = SzyDF)
PfVC <- lm(Persistence ~ Victimization + CClimate, data = SzyDF)
summary(PfV)
summary(PfVC)
anova(PfV, PfVC)
R2ch <- anova(PfV, PfVC)
R2ch
PfV <- lm(Persistence ~ Victimization, data = SzyDF)
PfVC <- lm(Persistence ~ Victimization + CClimate, data = SzyDF)
summary(PfV)
summary(PfVC)
anova(PfV, PfVC)
PfV <- lm(Persistence ~ Victimization, data = SzyDF)
PfVC <- lm(Persistence ~ Victimization + CClimate, data = SzyDF)
summary(PfV)
summary(PfVC)
anova(PfV, PfVC)
AfV <- lm(Anxiety ~ Victimization, data = SzyDF)
AfVC <- lm(Anxiety ~ Victimization + CClimate, data = SzyDF)
summary(AfV)
summary(AfVC)
anova(AfVC)
AfV <- lm(Anxiety ~ Victimization, data = SzyDF)
AfVC <- lm(Anxiety ~ Victimization + CClimate, data = SzyDF)
summary(AfV)
summary(AfVC)
anova(AfV, AfVC)
citr:::insert_citation()
n=rep(1:100,2)
a=0
b = 1
sigma2 = n^1.3
eps = rnorm(n,mean=0,sd=sqrt(sigma2))
y=a+b*n + eps
mod <- lm(y ~ n)
plot(n,y)
citr:::insert_citation()
set.seed(210827)
SzyT1 <- matrix(c(.88, .73, .73, -.07,-.02, .16, -.03, .10, -.04, .86, .76, .71), ncol=2) #primary factor loadings for the two factors
rownames(SzyT1) <- c("cold", "unresponsive", "supportiveNR", "negative", "heterosexism", "harassed") #variable names for the six items
#rownames(Szyf2) <- paste("V", seq(1:6), sep=" ") #prior code I replaced with above
colnames(SzyT1) <- c("F1", "F2")
SzyCorMat <- SzyT1 %*% t(SzyT1) #create the correlation matrix
diag(SzyCorMat) <- 1
#SzyCorMat #prints the correlation matrix
SzyM <- c(2.31, 3.11, 2.40, 3.18, 4.44, 3.02) #item means
SzySD <- c(1.35, 1.46, 1.26, 1.60, 1.75, 1.50) #item standard deviations; turns out we won't need these since we have a covariance matrix
SzyCovMat <- SzySD %*% t(SzySD) * SzyCorMat #creates a covariance matrix from the correlation matrix
#SzyCovMat #displays the covariance matrix
dfSzyT1 <- as.data.frame(round(MASS::mvrnorm(n=646, mu = SzyM, Sigma = SzyCovMat, empirical = TRUE),0)) #creates the item level data from the sample size, mean, and covariance matrix
dfSzyT1[dfSzyT1>7]<-7 #restricts the upperbound of all variables to be 7 or less
dfSzyT1[dfSzyT1<1]<-1 #resticts the lowerbound of all variable to be 1 or greater
#colMeans(dfSzyT1) #displays column means
library(tidyverse)
library(dplyr)
dfSzyT1 <- dfSzyT1 %>% dplyr::mutate(ID = row_number()) #add ID to each row
dfSzyT1 <- dfSzyT1%>%dplyr::select(ID, everything())#moving the ID number to the first column; requires
dfSzyT1<- dfSzyT1 %>%
mutate(supportive = 8 - supportiveNR) #because the original scale had 1 reversed item, I reversed it so that we can re-reverse it for practice. Remember in reversals we subtract from a number 1 greater than our scaling
dfSzyT1 <- dfSzyT1%>%
select(-supportiveNR)
#write the simulated data  as a .csv
write.table(dfSzyT1, file="dfSzyT1.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
dfSzyT1 <- read.csv ("dfSzyT1.csv", header = TRUE)
#bring back the simulated dat from a .csv file
dfSzyT1 <- read.csv ("dfSzyT1.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
saveRDS(dfSzyT1, "dfSzyT1.rds")
#bring back the simulated dat from an .rds file
dfSzyT1 <- readRDS("dfSzyT1.rds")
#bring back the simulated dat from an .rds file
dfSzyT1 <- readRDS("dfSzyT1.rds")
